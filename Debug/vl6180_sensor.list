
vl6180_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000789c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08007a50  08007a50  00017a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c48  08007c48  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007c48  08007c48  00017c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c50  08007c50  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c50  08007c50  00017c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c54  08007c54  00017c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000010  08007c68  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08007c68  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ea3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ac9  00000000  00000000  00032ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  000359b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00036900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a8f  00000000  00000000  00037710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a34  00000000  00000000  0005c19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db6f9  00000000  00000000  0006fbd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b2cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000428c  00000000  00000000  0014b320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007a34 	.word	0x08007a34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08007a34 	.word	0x08007a34

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b96e 	b.w	8000e20 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	468c      	mov	ip, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8083 	bne.w	8000c72 <__udivmoddi4+0x116>
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	4617      	mov	r7, r2
 8000b70:	d947      	bls.n	8000c02 <__udivmoddi4+0xa6>
 8000b72:	fab2 f282 	clz	r2, r2
 8000b76:	b142      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b78:	f1c2 0020 	rsb	r0, r2, #32
 8000b7c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b80:	4091      	lsls	r1, r2
 8000b82:	4097      	lsls	r7, r2
 8000b84:	ea40 0c01 	orr.w	ip, r0, r1
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbbc f6f8 	udiv	r6, ip, r8
 8000b94:	fa1f fe87 	uxth.w	lr, r7
 8000b98:	fb08 c116 	mls	r1, r8, r6, ip
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bae:	f080 8119 	bcs.w	8000de4 <__udivmoddi4+0x288>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8116 	bls.w	8000de4 <__udivmoddi4+0x288>
 8000bb8:	3e02      	subs	r6, #2
 8000bba:	443b      	add	r3, r7
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bd0:	45a6      	cmp	lr, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	193c      	adds	r4, r7, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 8105 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bde:	45a6      	cmp	lr, r4
 8000be0:	f240 8102 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000be4:	3802      	subs	r0, #2
 8000be6:	443c      	add	r4, r7
 8000be8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bec:	eba4 040e 	sub.w	r4, r4, lr
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	b11d      	cbz	r5, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bfc:	4631      	mov	r1, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	b902      	cbnz	r2, 8000c06 <__udivmoddi4+0xaa>
 8000c04:	deff      	udf	#255	; 0xff
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	d150      	bne.n	8000cb0 <__udivmoddi4+0x154>
 8000c0e:	1bcb      	subs	r3, r1, r7
 8000c10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c14:	fa1f f887 	uxth.w	r8, r7
 8000c18:	2601      	movs	r6, #1
 8000c1a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c1e:	0c21      	lsrs	r1, r4, #16
 8000c20:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c28:	fb08 f30c 	mul.w	r3, r8, ip
 8000c2c:	428b      	cmp	r3, r1
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000c30:	1879      	adds	r1, r7, r1
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0xe2>
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	f200 80e9 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1ac9      	subs	r1, r1, r3
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x10c>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x10a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80d9 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e7bf      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x12e>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80b1 	beq.w	8000dde <__udivmoddi4+0x282>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x1cc>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0x140>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80b8 	bhi.w	8000e0c <__udivmoddi4+0x2b0>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0103 	sbc.w	r1, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0a8      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000caa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cae:	e7a5      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cb8:	4097      	lsls	r7, r2
 8000cba:	fa01 f002 	lsl.w	r0, r1, r2
 8000cbe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc2:	40d9      	lsrs	r1, r3
 8000cc4:	4330      	orrs	r0, r6
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ccc:	fa1f f887 	uxth.w	r8, r7
 8000cd0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd8:	fb06 f108 	mul.w	r1, r6, r8
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x19c>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cea:	f080 808d 	bcs.w	8000e08 <__udivmoddi4+0x2ac>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 808a 	bls.w	8000e08 <__udivmoddi4+0x2ac>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b281      	uxth	r1, r0
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d08:	fb00 f308 	mul.w	r3, r0, r8
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x1c4>
 8000d10:	1879      	adds	r1, r7, r1
 8000d12:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d16:	d273      	bcs.n	8000e00 <__udivmoddi4+0x2a4>
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d971      	bls.n	8000e00 <__udivmoddi4+0x2a4>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4439      	add	r1, r7
 8000d20:	1acb      	subs	r3, r1, r3
 8000d22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d26:	e778      	b.n	8000c1a <__udivmoddi4+0xbe>
 8000d28:	f1c6 0c20 	rsb	ip, r6, #32
 8000d2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d34:	431c      	orrs	r4, r3
 8000d36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d46:	431f      	orrs	r7, r3
 8000d48:	0c3b      	lsrs	r3, r7, #16
 8000d4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d4e:	fa1f f884 	uxth.w	r8, r4
 8000d52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d5e:	458a      	cmp	sl, r1
 8000d60:	fa02 f206 	lsl.w	r2, r2, r6
 8000d64:	fa00 f306 	lsl.w	r3, r0, r6
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x220>
 8000d6a:	1861      	adds	r1, r4, r1
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d70:	d248      	bcs.n	8000e04 <__udivmoddi4+0x2a8>
 8000d72:	458a      	cmp	sl, r1
 8000d74:	d946      	bls.n	8000e04 <__udivmoddi4+0x2a8>
 8000d76:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7a:	4421      	add	r1, r4
 8000d7c:	eba1 010a 	sub.w	r1, r1, sl
 8000d80:	b2bf      	uxth	r7, r7
 8000d82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d8e:	fb00 f808 	mul.w	r8, r0, r8
 8000d92:	45b8      	cmp	r8, r7
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x24a>
 8000d96:	19e7      	adds	r7, r4, r7
 8000d98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9c:	d22e      	bcs.n	8000dfc <__udivmoddi4+0x2a0>
 8000d9e:	45b8      	cmp	r8, r7
 8000da0:	d92c      	bls.n	8000dfc <__udivmoddi4+0x2a0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	4427      	add	r7, r4
 8000da6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000daa:	eba7 0708 	sub.w	r7, r7, r8
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	454f      	cmp	r7, r9
 8000db4:	46c6      	mov	lr, r8
 8000db6:	4649      	mov	r1, r9
 8000db8:	d31a      	bcc.n	8000df0 <__udivmoddi4+0x294>
 8000dba:	d017      	beq.n	8000dec <__udivmoddi4+0x290>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x27a>
 8000dbe:	ebb3 020e 	subs.w	r2, r3, lr
 8000dc2:	eb67 0701 	sbc.w	r7, r7, r1
 8000dc6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dca:	40f2      	lsrs	r2, r6
 8000dcc:	ea4c 0202 	orr.w	r2, ip, r2
 8000dd0:	40f7      	lsrs	r7, r6
 8000dd2:	e9c5 2700 	strd	r2, r7, [r5]
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	462e      	mov	r6, r5
 8000de0:	4628      	mov	r0, r5
 8000de2:	e70b      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de4:	4606      	mov	r6, r0
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0x60>
 8000de8:	4618      	mov	r0, r3
 8000dea:	e6fd      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000dec:	4543      	cmp	r3, r8
 8000dee:	d2e5      	bcs.n	8000dbc <__udivmoddi4+0x260>
 8000df0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000df4:	eb69 0104 	sbc.w	r1, r9, r4
 8000df8:	3801      	subs	r0, #1
 8000dfa:	e7df      	b.n	8000dbc <__udivmoddi4+0x260>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	e7d2      	b.n	8000da6 <__udivmoddi4+0x24a>
 8000e00:	4660      	mov	r0, ip
 8000e02:	e78d      	b.n	8000d20 <__udivmoddi4+0x1c4>
 8000e04:	4681      	mov	r9, r0
 8000e06:	e7b9      	b.n	8000d7c <__udivmoddi4+0x220>
 8000e08:	4666      	mov	r6, ip
 8000e0a:	e775      	b.n	8000cf8 <__udivmoddi4+0x19c>
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e74a      	b.n	8000ca6 <__udivmoddi4+0x14a>
 8000e10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e14:	4439      	add	r1, r7
 8000e16:	e713      	b.n	8000c40 <__udivmoddi4+0xe4>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	443c      	add	r4, r7
 8000e1c:	e724      	b.n	8000c68 <__udivmoddi4+0x10c>
 8000e1e:	bf00      	nop

08000e20 <__aeabi_idiv0>:
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_DAC_Init+0x4c>)
 8000e34:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <MX_DAC_Init+0x50>)
 8000e36:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <MX_DAC_Init+0x4c>)
 8000e3a:	f000 fe95 	bl	8001b68 <HAL_DAC_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e44:	f000 faf0 	bl	8001428 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000e48:	2324      	movs	r3, #36	; 0x24
 8000e4a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	2200      	movs	r2, #0
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_DAC_Init+0x4c>)
 8000e58:	f000 fff8 	bl	8001e4c <HAL_DAC_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e62:	f000 fae1 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000090 	.word	0x20000090
 8000e74:	40007400 	.word	0x40007400

08000e78 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a33      	ldr	r2, [pc, #204]	; (8000f64 <HAL_DAC_MspInit+0xec>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d160      	bne.n	8000f5c <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <HAL_DAC_MspInit+0xf0>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a31      	ldr	r2, [pc, #196]	; (8000f68 <HAL_DAC_MspInit+0xf0>)
 8000ea4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <HAL_DAC_MspInit+0xf0>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <HAL_DAC_MspInit+0xf0>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a2a      	ldr	r2, [pc, #168]	; (8000f68 <HAL_DAC_MspInit+0xf0>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <HAL_DAC_MspInit+0xf0>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ed2:	2310      	movs	r3, #16
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4821      	ldr	r0, [pc, #132]	; (8000f6c <HAL_DAC_MspInit+0xf4>)
 8000ee6:	f001 fc35 	bl	8002754 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <HAL_DAC_MspInit+0xf8>)
 8000eec:	4a21      	ldr	r2, [pc, #132]	; (8000f74 <HAL_DAC_MspInit+0xfc>)
 8000eee:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <HAL_DAC_MspInit+0xf8>)
 8000ef2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000ef6:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <HAL_DAC_MspInit+0xf8>)
 8000efa:	2240      	movs	r2, #64	; 0x40
 8000efc:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efe:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <HAL_DAC_MspInit+0xf8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <HAL_DAC_MspInit+0xf8>)
 8000f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f0a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <HAL_DAC_MspInit+0xf8>)
 8000f0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f12:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_DAC_MspInit+0xf8>)
 8000f16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f1a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_DAC_MspInit+0xf8>)
 8000f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f22:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_DAC_MspInit+0xf8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <HAL_DAC_MspInit+0xf8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000f30:	480f      	ldr	r0, [pc, #60]	; (8000f70 <HAL_DAC_MspInit+0xf8>)
 8000f32:	f001 f86f 	bl	8002014 <HAL_DMA_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8000f3c:	f000 fa74 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <HAL_DAC_MspInit+0xf8>)
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <HAL_DAC_MspInit+0xf8>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2036      	movs	r0, #54	; 0x36
 8000f52:	f000 fddf 	bl	8001b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f56:	2036      	movs	r0, #54	; 0x36
 8000f58:	f000 fdf8 	bl	8001b4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3728      	adds	r7, #40	; 0x28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40007400 	.word	0x40007400
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	20000030 	.word	0x20000030
 8000f74:	40026088 	.word	0x40026088

08000f78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_DMA_Init+0x3c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <MX_DMA_Init+0x3c>)
 8000f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_DMA_Init+0x3c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2010      	movs	r0, #16
 8000fa0:	f000 fdb8 	bl	8001b14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fa4:	2010      	movs	r0, #16
 8000fa6:	f000 fdd1 	bl	8001b4c <HAL_NVIC_EnableIRQ>

}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b20      	ldr	r3, [pc, #128]	; (8001054 <MX_GPIO_Init+0x9c>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a1f      	ldr	r2, [pc, #124]	; (8001054 <MX_GPIO_Init+0x9c>)
 8000fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MX_GPIO_Init+0x9c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <MX_GPIO_Init+0x9c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a18      	ldr	r2, [pc, #96]	; (8001054 <MX_GPIO_Init+0x9c>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_GPIO_Init+0x9c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_GPIO_Init+0x9c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a11      	ldr	r2, [pc, #68]	; (8001054 <MX_GPIO_Init+0x9c>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_GPIO_Init+0x9c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001022:	2301      	movs	r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_GPIO_Init+0xa0>)
 8001028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800102a:	2302      	movs	r3, #2
 800102c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4619      	mov	r1, r3
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <MX_GPIO_Init+0xa4>)
 8001036:	f001 fb8d 	bl	8002754 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2006      	movs	r0, #6
 8001040:	f000 fd68 	bl	8001b14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001044:	2006      	movs	r0, #6
 8001046:	f000 fd81 	bl	8001b4c <HAL_NVIC_EnableIRQ>

}
 800104a:	bf00      	nop
 800104c:	3720      	adds	r7, #32
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	10110000 	.word	0x10110000
 800105c:	40020000 	.word	0x40020000

08001060 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001066:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <MX_I2C1_Init+0x78>)
 8001068:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_I2C1_Init+0x74>)
 800106c:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <MX_I2C1_Init+0x7c>)
 800106e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_I2C1_Init+0x74>)
 800107e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001082:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2C1_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_I2C1_Init+0x74>)
 800109e:	f001 fd1d 	bl	8002adc <HAL_I2C_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a8:	f000 f9be 	bl	8001428 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ac:	2100      	movs	r1, #0
 80010ae:	4809      	ldr	r0, [pc, #36]	; (80010d4 <MX_I2C1_Init+0x74>)
 80010b0:	f004 f870 	bl	8005194 <HAL_I2CEx_ConfigAnalogFilter>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80010ba:	f000 f9b5 	bl	8001428 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_I2C1_Init+0x74>)
 80010c2:	f004 f8a3 	bl	800520c <HAL_I2CEx_ConfigDigitalFilter>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80010cc:	f000 f9ac 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200000a4 	.word	0x200000a4
 80010d8:	40005400 	.word	0x40005400
 80010dc:	000186a0 	.word	0x000186a0

080010e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a1d      	ldr	r2, [pc, #116]	; (8001174 <HAL_I2C_MspInit+0x94>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d133      	bne.n	800116a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <HAL_I2C_MspInit+0x98>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <HAL_I2C_MspInit+0x98>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <HAL_I2C_MspInit+0x98>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800111e:	23c0      	movs	r3, #192	; 0xc0
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001122:	2312      	movs	r3, #18
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001126:	2301      	movs	r3, #1
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800112e:	2304      	movs	r3, #4
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	4810      	ldr	r0, [pc, #64]	; (800117c <HAL_I2C_MspInit+0x9c>)
 800113a:	f001 fb0b 	bl	8002754 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_I2C_MspInit+0x98>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <HAL_I2C_MspInit+0x98>)
 8001148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_I2C_MspInit+0x98>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	201f      	movs	r0, #31
 8001160:	f000 fcd8 	bl	8001b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001164:	201f      	movs	r0, #31
 8001166:	f000 fcf1 	bl	8001b4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	; 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40005400 	.word	0x40005400
 8001178:	40023800 	.word	0x40023800
 800117c:	40020400 	.word	0x40020400

08001180 <Get_SineVal>:

uint8_t freq =1 ,dev=1;


void Get_SineVal(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	for(int i=0 ;i<100;i++)
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	e031      	b.n	80011f0 <Get_SineVal+0x70>
	{
		sine_val[i] = ((sin(i*2*PI/100))*(4096/2)); /* equation to generate digital values*/
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f97f 	bl	8000494 <__aeabi_i2d>
 8001196:	a31d      	add	r3, pc, #116	; (adr r3, 800120c <Get_SineVal+0x8c>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff f9e4 	bl	8000568 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <Get_SineVal+0x80>)
 80011ae:	f7ff fb05 	bl	80007bc <__aeabi_ddiv>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	ec43 2b17 	vmov	d7, r2, r3
 80011ba:	eeb0 0a47 	vmov.f32	s0, s14
 80011be:	eef0 0a67 	vmov.f32	s1, s15
 80011c2:	f005 fc01 	bl	80069c8 <sin>
 80011c6:	ec51 0b10 	vmov	r0, r1, d0
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <Get_SineVal+0x84>)
 80011d0:	f7ff f9ca 	bl	8000568 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fc86 	bl	8000aec <__aeabi_d2uiz>
 80011e0:	4602      	mov	r2, r0
 80011e2:	4909      	ldr	r1, [pc, #36]	; (8001208 <Get_SineVal+0x88>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0 ;i<100;i++)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3301      	adds	r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b63      	cmp	r3, #99	; 0x63
 80011f4:	ddca      	ble.n	800118c <Get_SineVal+0xc>
	}
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40590000 	.word	0x40590000
 8001204:	40a00000 	.word	0x40a00000
 8001208:	200000f8 	.word	0x200000f8
 800120c:	f01b866e 	.word	0xf01b866e
 8001210:	400921f9 	.word	0x400921f9

08001214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121a:	f000 fb5d 	bl	80018d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121e:	f000 f833 	bl	8001288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001222:	f7ff fec9 	bl	8000fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001226:	f7ff fea7 	bl	8000f78 <MX_DMA_Init>
  MX_DAC_Init();
 800122a:	f7ff fdfb 	bl	8000e24 <MX_DAC_Init>
  MX_TIM2_Init();
 800122e:	f000 f9f9 	bl	8001624 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001232:	f7ff ff15 	bl	8001060 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  Get_SineVal();
 8001236:	f7ff ffa3 	bl	8001180 <Get_SineVal>


  HAL_TIM_Base_Start_IT(&htim2); /* start timer as a  DAC trigger */
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <main+0x60>)
 800123c:	f004 fd08 	bl	8005c50 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_val, 50 , DAC_ALIGN_12B_R);
 8001240:	2300      	movs	r3, #0
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2332      	movs	r3, #50	; 0x32
 8001246:	4a0c      	ldr	r2, [pc, #48]	; (8001278 <main+0x64>)
 8001248:	2100      	movs	r1, #0
 800124a:	480c      	ldr	r0, [pc, #48]	; (800127c <main+0x68>)
 800124c:	f000 fcae 	bl	8001bac <HAL_DAC_Start_DMA>
  init_vl6180(); /* initialize vl6180 sensor */
 8001250:	f000 faee 	bl	8001830 <init_vl6180>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  HAL_Delay(50);
 8001254:	2032      	movs	r0, #50	; 0x32
 8001256:	f000 fb81 	bl	800195c <HAL_Delay>
	  	  freq= (VL6180_GetDistance())/dev; /* used to modify the frequency */
 800125a:	f000 fac5 	bl	80017e8 <VL6180_GetDistance>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <main+0x6c>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <main+0x70>)
 800126e:	701a      	strb	r2, [r3, #0]
	  	  HAL_Delay(50);
 8001270:	e7f0      	b.n	8001254 <main+0x40>
 8001272:	bf00      	nop
 8001274:	200002d0 	.word	0x200002d0
 8001278:	200000f8 	.word	0x200000f8
 800127c:	20000090 	.word	0x20000090
 8001280:	20000001 	.word	0x20000001
 8001284:	20000000 	.word	0x20000000

08001288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b094      	sub	sp, #80	; 0x50
 800128c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	2230      	movs	r2, #48	; 0x30
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f005 fb8e 	bl	80069b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <SystemClock_Config+0xcc>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	4a27      	ldr	r2, [pc, #156]	; (8001354 <SystemClock_Config+0xcc>)
 80012b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ba:	6413      	str	r3, [r2, #64]	; 0x40
 80012bc:	4b25      	ldr	r3, [pc, #148]	; (8001354 <SystemClock_Config+0xcc>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	4b22      	ldr	r3, [pc, #136]	; (8001358 <SystemClock_Config+0xd0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a21      	ldr	r2, [pc, #132]	; (8001358 <SystemClock_Config+0xd0>)
 80012d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <SystemClock_Config+0xd0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e4:	2302      	movs	r3, #2
 80012e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e8:	2301      	movs	r3, #1
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ec:	2310      	movs	r3, #16
 80012ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f0:	2302      	movs	r3, #2
 80012f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f4:	2300      	movs	r3, #0
 80012f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012f8:	2308      	movs	r3, #8
 80012fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012fc:	23a8      	movs	r3, #168	; 0xa8
 80012fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001300:	2302      	movs	r3, #2
 8001302:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001304:	2307      	movs	r3, #7
 8001306:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	4618      	mov	r0, r3
 800130e:	f003 ffbd 	bl	800528c <HAL_RCC_OscConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001318:	f000 f886 	bl	8001428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131c:	230f      	movs	r3, #15
 800131e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001320:	2302      	movs	r3, #2
 8001322:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001328:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800132c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	2105      	movs	r1, #5
 800133a:	4618      	mov	r0, r3
 800133c:	f004 fa1e 	bl	800577c <HAL_RCC_ClockConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001346:	f000 f86f 	bl	8001428 <Error_Handler>
  }
}
 800134a:	bf00      	nop
 800134c:	3750      	adds	r7, #80	; 0x50
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40007000 	.word	0x40007000

0800135c <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]

	static int x =0  ;
	switch(x)
 8001366:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <HAL_GPIO_EXTI_Callback+0x80>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b05      	cmp	r3, #5
 800136c:	d826      	bhi.n	80013bc <HAL_GPIO_EXTI_Callback+0x60>
 800136e:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <HAL_GPIO_EXTI_Callback+0x18>)
 8001370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001374:	0800138d 	.word	0x0800138d
 8001378:	08001395 	.word	0x08001395
 800137c:	0800139d 	.word	0x0800139d
 8001380:	080013a5 	.word	0x080013a5
 8001384:	080013ad 	.word	0x080013ad
 8001388:	080013b5 	.word	0x080013b5
	{
	case 0 :
		dev = 1 ;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x84>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
	break ;
 8001392:	e017      	b.n	80013c4 <HAL_GPIO_EXTI_Callback+0x68>
	case 1 :
		dev = 2 ;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x84>)
 8001396:	2202      	movs	r2, #2
 8001398:	701a      	strb	r2, [r3, #0]
	break ;
 800139a:	e013      	b.n	80013c4 <HAL_GPIO_EXTI_Callback+0x68>
	case 2 :
		dev = 3 ;
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x84>)
 800139e:	2203      	movs	r2, #3
 80013a0:	701a      	strb	r2, [r3, #0]
	break ;
 80013a2:	e00f      	b.n	80013c4 <HAL_GPIO_EXTI_Callback+0x68>
	case 3 :
		dev = 4 ;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x84>)
 80013a6:	2204      	movs	r2, #4
 80013a8:	701a      	strb	r2, [r3, #0]
	break ;
 80013aa:	e00b      	b.n	80013c4 <HAL_GPIO_EXTI_Callback+0x68>
	case 4 :
		dev = 5 ;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x84>)
 80013ae:	2205      	movs	r2, #5
 80013b0:	701a      	strb	r2, [r3, #0]
	break ;
 80013b2:	e007      	b.n	80013c4 <HAL_GPIO_EXTI_Callback+0x68>
	case 5 :
		dev = 6 ;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x84>)
 80013b6:	2206      	movs	r2, #6
 80013b8:	701a      	strb	r2, [r3, #0]
	break ;
 80013ba:	e003      	b.n	80013c4 <HAL_GPIO_EXTI_Callback+0x68>

	case 6 :
	default :
		x=0;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <HAL_GPIO_EXTI_Callback+0x80>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
		break ;
 80013c2:	bf00      	nop
	}

	x++;
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_GPIO_EXTI_Callback+0x80>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_GPIO_EXTI_Callback+0x80>)
 80013cc:	6013      	str	r3, [r2, #0]

}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	2000002c 	.word	0x2000002c
 80013e0:	20000001 	.word	0x20000001

080013e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013f6:	f000 fa91 	bl	800191c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001402:	d109      	bne.n	8001418 <HAL_TIM_PeriodElapsedCallback+0x34>
	  {
	__HAL_TIM_SET_AUTORELOAD(htim,freq);
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001406:	781a      	ldrb	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	62da      	str	r2, [r3, #44]	; 0x2c
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	60da      	str	r2, [r3, #12]
	  }
  /* USER CODE END Callback 1 */
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40001000 	.word	0x40001000
 8001424:	20000000 	.word	0x20000000

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	e7fe      	b.n	8001430 <Error_Handler+0x8>
	...

08001434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_MspInit+0x4c>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <HAL_MspInit+0x4c>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_MspInit+0x4c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	603b      	str	r3, [r7, #0]
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_MspInit+0x4c>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_MspInit+0x4c>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_MspInit+0x4c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	2036      	movs	r0, #54	; 0x36
 800149a:	f000 fb3b 	bl	8001b14 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800149e:	2036      	movs	r0, #54	; 0x36
 80014a0:	f000 fb54 	bl	8001b4c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <HAL_InitTick+0xa4>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	4a1e      	ldr	r2, [pc, #120]	; (8001528 <HAL_InitTick+0xa4>)
 80014ae:	f043 0310 	orr.w	r3, r3, #16
 80014b2:	6413      	str	r3, [r2, #64]	; 0x40
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_InitTick+0xa4>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014c0:	f107 0210 	add.w	r2, r7, #16
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f004 fb3e 	bl	8005b4c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80014d0:	f004 fb28 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 80014d4:	4603      	mov	r3, r0
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014dc:	4a13      	ldr	r2, [pc, #76]	; (800152c <HAL_InitTick+0xa8>)
 80014de:	fba2 2303 	umull	r2, r3, r2, r3
 80014e2:	0c9b      	lsrs	r3, r3, #18
 80014e4:	3b01      	subs	r3, #1
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_InitTick+0xac>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <HAL_InitTick+0xb0>)
 80014ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_InitTick+0xac>)
 80014f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_InitTick+0xac>)
 80014f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_InitTick+0xac>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_InitTick+0xac>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001508:	4809      	ldr	r0, [pc, #36]	; (8001530 <HAL_InitTick+0xac>)
 800150a:	f004 fb51 	bl	8005bb0 <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d104      	bne.n	800151e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001514:	4806      	ldr	r0, [pc, #24]	; (8001530 <HAL_InitTick+0xac>)
 8001516:	f004 fb9b 	bl	8005c50 <HAL_TIM_Base_Start_IT>
 800151a:	4603      	mov	r3, r0
 800151c:	e000      	b.n	8001520 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3730      	adds	r7, #48	; 0x30
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40023800 	.word	0x40023800
 800152c:	431bde83 	.word	0x431bde83
 8001530:	20000288 	.word	0x20000288
 8001534:	40001000 	.word	0x40001000

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800153c:	e7fe      	b.n	800153c <NMI_Handler+0x4>

0800153e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <MemManage_Handler+0x4>

0800154a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <UsageFault_Handler+0x4>

08001556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001592:	2001      	movs	r0, #1
 8001594:	f001 fa8a 	bl	8002aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <DMA1_Stream5_IRQHandler+0x10>)
 80015a2:	f000 fe5f 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000030 	.word	0x20000030

080015b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <TIM2_IRQHandler+0x10>)
 80015b6:	f004 fc14 	bl	8005de2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200002d0 	.word	0x200002d0

080015c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <I2C1_EV_IRQHandler+0x10>)
 80015ca:	f001 feeb 	bl	80033a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200000a4 	.word	0x200000a4

080015d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <TIM6_DAC_IRQHandler+0x20>)
 80015de:	791b      	ldrb	r3, [r3, #4]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80015e6:	4804      	ldr	r0, [pc, #16]	; (80015f8 <TIM6_DAC_IRQHandler+0x20>)
 80015e8:	f000 fbae 	bl	8001d48 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80015ec:	4803      	ldr	r0, [pc, #12]	; (80015fc <TIM6_DAC_IRQHandler+0x24>)
 80015ee:	f004 fbf8 	bl	8005de2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000090 	.word	0x20000090
 80015fc:	20000288 	.word	0x20000288

08001600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <SystemInit+0x20>)
 8001606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <SystemInit+0x20>)
 800160c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	; 0x38
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
 8001650:	615a      	str	r2, [r3, #20]
 8001652:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001654:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <MX_TIM2_Init+0xe0>)
 8001656:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800165a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 168-1;
 800165c:	4b29      	ldr	r3, [pc, #164]	; (8001704 <MX_TIM2_Init+0xe0>)
 800165e:	22a7      	movs	r2, #167	; 0xa7
 8001660:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001662:	4b28      	ldr	r3, [pc, #160]	; (8001704 <MX_TIM2_Init+0xe0>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001668:	4b26      	ldr	r3, [pc, #152]	; (8001704 <MX_TIM2_Init+0xe0>)
 800166a:	2264      	movs	r2, #100	; 0x64
 800166c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166e:	4b25      	ldr	r3, [pc, #148]	; (8001704 <MX_TIM2_Init+0xe0>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001674:	4b23      	ldr	r3, [pc, #140]	; (8001704 <MX_TIM2_Init+0xe0>)
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800167a:	4822      	ldr	r0, [pc, #136]	; (8001704 <MX_TIM2_Init+0xe0>)
 800167c:	f004 fa98 	bl	8005bb0 <HAL_TIM_Base_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001686:	f7ff fecf 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001690:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001694:	4619      	mov	r1, r3
 8001696:	481b      	ldr	r0, [pc, #108]	; (8001704 <MX_TIM2_Init+0xe0>)
 8001698:	f004 fd04 	bl	80060a4 <HAL_TIM_ConfigClockSource>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80016a2:	f7ff fec1 	bl	8001428 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80016a6:	4817      	ldr	r0, [pc, #92]	; (8001704 <MX_TIM2_Init+0xe0>)
 80016a8:	f004 fb42 	bl	8005d30 <HAL_TIM_OC_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80016b2:	f7ff feb9 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016b6:	2320      	movs	r3, #32
 80016b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016be:	f107 0320 	add.w	r3, r7, #32
 80016c2:	4619      	mov	r1, r3
 80016c4:	480f      	ldr	r0, [pc, #60]	; (8001704 <MX_TIM2_Init+0xe0>)
 80016c6:	f005 f8c3 	bl	8006850 <HAL_TIMEx_MasterConfigSynchronization>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80016d0:	f7ff feaa 	bl	8001428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2200      	movs	r2, #0
 80016e8:	4619      	mov	r1, r3
 80016ea:	4806      	ldr	r0, [pc, #24]	; (8001704 <MX_TIM2_Init+0xe0>)
 80016ec:	f004 fc82 	bl	8005ff4 <HAL_TIM_OC_ConfigChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80016f6:	f7ff fe97 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	3738      	adds	r7, #56	; 0x38
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200002d0 	.word	0x200002d0

08001708 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001718:	d115      	bne.n	8001746 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_TIM_Base_MspInit+0x48>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <HAL_TIM_Base_MspInit+0x48>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_TIM_Base_MspInit+0x48>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	201c      	movs	r0, #28
 800173c:	f000 f9ea 	bl	8001b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001740:	201c      	movs	r0, #28
 8001742:	f000 fa03 	bl	8001b4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800

08001754 <VL6180_setRegister>:
 * param : RegAddr The specific register address
 * Data  : pointer to the required data to be write into the register the data size must be equal the register size
 * return : void
 */
void VL6180_setRegister(uint16_t RegAddr,uint8_t Data)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af04      	add	r7, sp, #16
 800175a:	4603      	mov	r3, r0
 800175c:	460a      	mov	r2, r1
 800175e:	80fb      	strh	r3, [r7, #6]
 8001760:	4613      	mov	r3, r2
 8001762:	717b      	strb	r3, [r7, #5]
	uint8_t data = Data ;
 8001764:	797b      	ldrb	r3, [r7, #5]
 8001766:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1,0x52,RegAddr,2,(uint8_t *)&data,1,2);
 8001768:	88fa      	ldrh	r2, [r7, #6]
 800176a:	2302      	movs	r3, #2
 800176c:	9302      	str	r3, [sp, #8]
 800176e:	2301      	movs	r3, #1
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	f107 030f 	add.w	r3, r7, #15
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2302      	movs	r3, #2
 800177a:	2152      	movs	r1, #82	; 0x52
 800177c:	4803      	ldr	r0, [pc, #12]	; (800178c <VL6180_setRegister+0x38>)
 800177e:	f001 faf1 	bl	8002d64 <HAL_I2C_Mem_Write>

}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200000a4 	.word	0x200000a4

08001790 <VL6180_setRegister16bit>:
 * param : RegAddr The specific register address
 * Data  : pointer to the required data to be write into the register the data size must be equal the register size
 * return : void
 */
void VL6180_setRegister16bit(uint16_t RegAddr,uint32_t Data)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af04      	add	r7, sp, #16
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	80fb      	strh	r3, [r7, #6]
	uint32_t data = (((Data>>8)&0xff)|((Data<<8)&0xff00)) ;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
	uint16_t addr = (((RegAddr>>8)&0xff)|((RegAddr<<8)&0xff00));
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b21b      	sxth	r3, r3
 80017be:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1,0x52,addr,2,(uint8_t *)&data,2,2);
 80017c0:	89fa      	ldrh	r2, [r7, #14]
 80017c2:	2302      	movs	r3, #2
 80017c4:	9302      	str	r3, [sp, #8]
 80017c6:	2302      	movs	r3, #2
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	2302      	movs	r3, #2
 80017d2:	2152      	movs	r1, #82	; 0x52
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <VL6180_setRegister16bit+0x54>)
 80017d6:	f001 fac5 	bl	8002d64 <HAL_I2C_Mem_Write>

}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200000a4 	.word	0x200000a4

080017e8 <VL6180_GetDistance>:
 * brief this function used to read from VL6180 registers
 * param : void
 * return : the read distance value from 0 - 255 mm
 */
uint8_t VL6180_GetDistance(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af04      	add	r7, sp, #16
	uint8_t pData =0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]
	VL6180_setRegister(VL6180_SYSRANGE_START_R, 0x03); //Start Single shot mode
 80017f2:	2103      	movs	r1, #3
 80017f4:	2018      	movs	r0, #24
 80017f6:	f7ff ffad 	bl	8001754 <VL6180_setRegister>
	HAL_Delay(100);
 80017fa:	2064      	movs	r0, #100	; 0x64
 80017fc:	f000 f8ae 	bl	800195c <HAL_Delay>

	VL6180_setRegister(VL6180_SYSTEM_INTERRUPT_CLEAR_R, 0x07);
 8001800:	2107      	movs	r1, #7
 8001802:	2015      	movs	r0, #21
 8001804:	f7ff ffa6 	bl	8001754 <VL6180_setRegister>
	HAL_I2C_Mem_Read(&hi2c1,0x52,VL6180_RESULT_RANGE_VAL,2, &pData, 1,2);
 8001808:	2302      	movs	r3, #2
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	2301      	movs	r3, #1
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	1dfb      	adds	r3, r7, #7
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2302      	movs	r3, #2
 8001816:	2262      	movs	r2, #98	; 0x62
 8001818:	2152      	movs	r1, #82	; 0x52
 800181a:	4804      	ldr	r0, [pc, #16]	; (800182c <VL6180_GetDistance+0x44>)
 800181c:	f001 fb9c 	bl	8002f58 <HAL_I2C_Mem_Read>
	return pData ;
 8001820:	79fb      	ldrb	r3, [r7, #7]


}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200000a4 	.word	0x200000a4

08001830 <init_vl6180>:


void   init_vl6180(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0

	  VL6180_setRegister(VL6180_SYSTEM_INTERRUPT_CONFIG_GPIO_R, (4 << 3)|(4) ); // Set GPIO1 high when sample complete
 8001834:	2124      	movs	r1, #36	; 0x24
 8001836:	2014      	movs	r0, #20
 8001838:	f7ff ff8c 	bl	8001754 <VL6180_setRegister>


	  VL6180_setRegister(VL6180_READOUT_AVERAGING_SAMPLE_PERIOD_R, 0x30); //Set Avg sample period
 800183c:	2130      	movs	r1, #48	; 0x30
 800183e:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8001842:	f7ff ff87 	bl	8001754 <VL6180_setRegister>
	  VL6180_setRegister(VL6180_SYSRANGE_VHV_REPEAT_RATE_R, 0xFF); // Set auto calibration period (Max = 255)/(OFF = 0)
 8001846:	21ff      	movs	r1, #255	; 0xff
 8001848:	2031      	movs	r0, #49	; 0x31
 800184a:	f7ff ff83 	bl	8001754 <VL6180_setRegister>
	  VL6180_setRegister(VL6180_SYSRANGE_VHV_RECALIBRATE_R, 0x01); // perform a single temperature calibration
 800184e:	2101      	movs	r1, #1
 8001850:	202e      	movs	r0, #46	; 0x2e
 8001852:	f7ff ff7f 	bl	8001754 <VL6180_setRegister>

	  VL6180_setRegister(VL6180_SYSRANGE_INTERMEASUREMENT_PERIOD_R, 0x09); // Set default ranging inter-measurement period to 100ms
 8001856:	2109      	movs	r1, #9
 8001858:	201b      	movs	r0, #27
 800185a:	f7ff ff7b 	bl	8001754 <VL6180_setRegister>
	  //Additional settings defaults from community
	  VL6180_setRegister(VL6180_SYSRANGE_MAX_CONVERGENCE_TIME_R, 0x32);
 800185e:	2132      	movs	r1, #50	; 0x32
 8001860:	201c      	movs	r0, #28
 8001862:	f7ff ff77 	bl	8001754 <VL6180_setRegister>
	  VL6180_setRegister(VL6180_SYSRANGE_RANGE_CHECK_ENABLES_R, 0x10 | 0x01);
 8001866:	2111      	movs	r1, #17
 8001868:	202d      	movs	r0, #45	; 0x2d
 800186a:	f7ff ff73 	bl	8001754 <VL6180_setRegister>
	  VL6180_setRegister16bit(VL6180_SYSRANGE_EARLY_CONVERGENCE_ESTIMATE_16Bit_R, 0x7B );
 800186e:	217b      	movs	r1, #123	; 0x7b
 8001870:	2022      	movs	r0, #34	; 0x22
 8001872:	f7ff ff8d 	bl	8001790 <VL6180_setRegister16bit>

	  VL6180_setRegister(VL6180_READOUT_AVERAGING_SAMPLE_PERIOD_R,0x30);
 8001876:	2130      	movs	r1, #48	; 0x30
 8001878:	f44f 7085 	mov.w	r0, #266	; 0x10a
 800187c:	f7ff ff6a 	bl	8001754 <VL6180_setRegister>

}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018bc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800188a:	490e      	ldr	r1, [pc, #56]	; (80018c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800188c:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a0:	4c0b      	ldr	r4, [pc, #44]	; (80018d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ae:	f7ff fea7 	bl	8001600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b2:	f005 f85d 	bl	8006970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b6:	f7ff fcad 	bl	8001214 <main>
  bx  lr    
 80018ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80018c8:	08007c58 	.word	0x08007c58
  ldr r2, =_sbss
 80018cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80018d0:	2000031c 	.word	0x2000031c

080018d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC_IRQHandler>
	...

080018d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <HAL_Init+0x40>)
 80018e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_Init+0x40>)
 80018ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_Init+0x40>)
 80018fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001900:	2003      	movs	r0, #3
 8001902:	f000 f8fc 	bl	8001afe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff fdbc 	bl	8001484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800190c:	f7ff fd92 	bl	8001434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023c00 	.word	0x40023c00

0800191c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_IncTick+0x20>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_IncTick+0x24>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <HAL_IncTick+0x24>)
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	2000000c 	.word	0x2000000c
 8001940:	20000318 	.word	0x20000318

08001944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return uwTick;
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_GetTick+0x14>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000318 	.word	0x20000318

0800195c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff ffee 	bl	8001944 <HAL_GetTick>
 8001968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001974:	d005      	beq.n	8001982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_Delay+0x44>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001982:	bf00      	nop
 8001984:	f7ff ffde 	bl	8001944 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	429a      	cmp	r2, r3
 8001992:	d8f7      	bhi.n	8001984 <HAL_Delay+0x28>
  {
  }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	2000000c 	.word	0x2000000c

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db0b      	blt.n	8001a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4907      	ldr	r1, [pc, #28]	; (8001a40 <__NVIC_EnableIRQ+0x38>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2001      	movs	r0, #1
 8001a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e100 	.word	0xe000e100

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ff4c 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b26:	f7ff ff61 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001b2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	6978      	ldr	r0, [r7, #20]
 8001b32:	f7ff ffb1 	bl	8001a98 <NVIC_EncodePriority>
 8001b36:	4602      	mov	r2, r0
 8001b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff80 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b44:	bf00      	nop
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff54 	bl	8001a08 <__NVIC_EnableIRQ>
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e014      	b.n	8001ba4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	791b      	ldrb	r3, [r3, #4]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff f974 	bl	8000e78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	795b      	ldrb	r3, [r3, #5]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_DAC_Start_DMA+0x22>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e0ab      	b.n	8001d26 <HAL_DAC_Start_DMA+0x17a>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d12f      	bne.n	8001c40 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4a52      	ldr	r2, [pc, #328]	; (8001d30 <HAL_DAC_Start_DMA+0x184>)
 8001be6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4a51      	ldr	r2, [pc, #324]	; (8001d34 <HAL_DAC_Start_DMA+0x188>)
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	4a50      	ldr	r2, [pc, #320]	; (8001d38 <HAL_DAC_Start_DMA+0x18c>)
 8001bf6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c06:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d013      	beq.n	8001c36 <HAL_DAC_Start_DMA+0x8a>
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d845      	bhi.n	8001ca0 <HAL_DAC_Start_DMA+0xf4>
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_DAC_Start_DMA+0x76>
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d005      	beq.n	8001c2c <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001c20:	e03e      	b.n	8001ca0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	3308      	adds	r3, #8
 8001c28:	613b      	str	r3, [r7, #16]
        break;
 8001c2a:	e03c      	b.n	8001ca6 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	330c      	adds	r3, #12
 8001c32:	613b      	str	r3, [r7, #16]
        break;
 8001c34:	e037      	b.n	8001ca6 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	3310      	adds	r3, #16
 8001c3c:	613b      	str	r3, [r7, #16]
        break;
 8001c3e:	e032      	b.n	8001ca6 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4a3d      	ldr	r2, [pc, #244]	; (8001d3c <HAL_DAC_Start_DMA+0x190>)
 8001c46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4a3c      	ldr	r2, [pc, #240]	; (8001d40 <HAL_DAC_Start_DMA+0x194>)
 8001c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4a3b      	ldr	r2, [pc, #236]	; (8001d44 <HAL_DAC_Start_DMA+0x198>)
 8001c56:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c66:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d013      	beq.n	8001c96 <HAL_DAC_Start_DMA+0xea>
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d817      	bhi.n	8001ca4 <HAL_DAC_Start_DMA+0xf8>
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_DAC_Start_DMA+0xd6>
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d005      	beq.n	8001c8c <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001c80:	e010      	b.n	8001ca4 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3314      	adds	r3, #20
 8001c88:	613b      	str	r3, [r7, #16]
        break;
 8001c8a:	e00c      	b.n	8001ca6 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3318      	adds	r3, #24
 8001c92:	613b      	str	r3, [r7, #16]
        break;
 8001c94:	e007      	b.n	8001ca6 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	331c      	adds	r3, #28
 8001c9c:	613b      	str	r3, [r7, #16]
        break;
 8001c9e:	e002      	b.n	8001ca6 <HAL_DAC_Start_DMA+0xfa>
        break;
 8001ca0:	bf00      	nop
 8001ca2:	e000      	b.n	8001ca6 <HAL_DAC_Start_DMA+0xfa>
        break;
 8001ca4:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d111      	bne.n	8001cd0 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6898      	ldr	r0, [r3, #8]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	f000 fa53 	bl	8002170 <HAL_DMA_Start_IT>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	75fb      	strb	r3, [r7, #23]
 8001cce:	e010      	b.n	8001cf2 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001cde:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	68d8      	ldr	r0, [r3, #12]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	f000 fa41 	bl	8002170 <HAL_DMA_Start_IT>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10c      	bne.n	8001d18 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6819      	ldr	r1, [r3, #0]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e005      	b.n	8001d24 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f043 0204 	orr.w	r2, r3, #4
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	08001eeb 	.word	0x08001eeb
 8001d34:	08001f0d 	.word	0x08001f0d
 8001d38:	08001f29 	.word	0x08001f29
 8001d3c:	08001fa7 	.word	0x08001fa7
 8001d40:	08001fc9 	.word	0x08001fc9
 8001d44:	08001fe5 	.word	0x08001fe5

08001d48 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d5e:	d120      	bne.n	8001da2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d6e:	d118      	bne.n	8001da2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2204      	movs	r2, #4
 8001d74:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f043 0201 	orr.w	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d9a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f84b 	bl	8001e38 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001db0:	d120      	bne.n	8001df4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dc0:	d118      	bne.n	8001df4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	f043 0202 	orr.w	r2, r3, #2
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001dec:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8cf 	bl	8001f92 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	795b      	ldrb	r3, [r3, #5]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_DAC_ConfigChannel+0x18>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e03c      	b.n	8001ede <HAL_DAC_ConfigChannel+0x92>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2201      	movs	r2, #1
 8001e68:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6819      	ldr	r1, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	22c0      	movs	r2, #192	; 0xc0
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	400a      	ands	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f7ff ff7f 	bl	8001dfc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	711a      	strb	r2, [r3, #4]
}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f18:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f7ff ff78 	bl	8001e10 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001f20:	bf00      	nop
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f043 0204 	orr.w	r2, r3, #4
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f7ff ff6e 	bl	8001e24 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	711a      	strb	r2, [r3, #4]
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f7ff ffce 	bl	8001f56 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	711a      	strb	r2, [r3, #4]
}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f7ff ffc7 	bl	8001f6a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f043 0204 	orr.w	r2, r3, #4
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f7ff ffbd 	bl	8001f7e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	711a      	strb	r2, [r3, #4]
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff fc90 	bl	8001944 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e099      	b.n	8002164 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002050:	e00f      	b.n	8002072 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002052:	f7ff fc77 	bl	8001944 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b05      	cmp	r3, #5
 800205e:	d908      	bls.n	8002072 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2203      	movs	r2, #3
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e078      	b.n	8002164 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e8      	bne.n	8002052 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4b38      	ldr	r3, [pc, #224]	; (800216c <HAL_DMA_Init+0x158>)
 800208c:	4013      	ands	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800209e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d107      	bne.n	80020dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4313      	orrs	r3, r2
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4313      	orrs	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f023 0307 	bic.w	r3, r3, #7
 80020f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	2b04      	cmp	r3, #4
 8002104:	d117      	bne.n	8002136 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00e      	beq.n	8002136 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 fa9f 	bl	800265c <DMA_CheckFifoParam>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2240      	movs	r2, #64	; 0x40
 8002128:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002132:	2301      	movs	r3, #1
 8002134:	e016      	b.n	8002164 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fa56 	bl	80025f0 <DMA_CalcBaseAndBitshift>
 8002144:	4603      	mov	r3, r0
 8002146:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	223f      	movs	r2, #63	; 0x3f
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	f010803f 	.word	0xf010803f

08002170 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002186:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_DMA_Start_IT+0x26>
 8002192:	2302      	movs	r3, #2
 8002194:	e040      	b.n	8002218 <HAL_DMA_Start_IT+0xa8>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d12f      	bne.n	800220a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2202      	movs	r2, #2
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f9e8 	bl	8002594 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	223f      	movs	r2, #63	; 0x3f
 80021ca:	409a      	lsls	r2, r3
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0216 	orr.w	r2, r2, #22
 80021de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0208 	orr.w	r2, r2, #8
 80021f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e005      	b.n	8002216 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002212:	2302      	movs	r3, #2
 8002214:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002216:	7dfb      	ldrb	r3, [r7, #23]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d004      	beq.n	800223e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2280      	movs	r2, #128	; 0x80
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e00c      	b.n	8002258 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2205      	movs	r2, #5
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0201 	bic.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002270:	4b92      	ldr	r3, [pc, #584]	; (80024bc <HAL_DMA_IRQHandler+0x258>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a92      	ldr	r2, [pc, #584]	; (80024c0 <HAL_DMA_IRQHandler+0x25c>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0a9b      	lsrs	r3, r3, #10
 800227c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	2208      	movs	r2, #8
 8002290:	409a      	lsls	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01a      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0204 	bic.w	r2, r2, #4
 80022b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	2208      	movs	r2, #8
 80022be:	409a      	lsls	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d4:	2201      	movs	r2, #1
 80022d6:	409a      	lsls	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d012      	beq.n	8002306 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00b      	beq.n	8002306 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f2:	2201      	movs	r2, #1
 80022f4:	409a      	lsls	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f043 0202 	orr.w	r2, r3, #2
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	2204      	movs	r2, #4
 800230c:	409a      	lsls	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d012      	beq.n	800233c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	2204      	movs	r2, #4
 800232a:	409a      	lsls	r2, r3
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002334:	f043 0204 	orr.w	r2, r3, #4
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	2210      	movs	r2, #16
 8002342:	409a      	lsls	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d043      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d03c      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	2210      	movs	r2, #16
 8002360:	409a      	lsls	r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d018      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d108      	bne.n	8002394 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d024      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
 8002392:	e01f      	b.n	80023d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01b      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4798      	blx	r3
 80023a4:	e016      	b.n	80023d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0208 	bic.w	r2, r2, #8
 80023c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	2220      	movs	r2, #32
 80023da:	409a      	lsls	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 808e 	beq.w	8002502 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8086 	beq.w	8002502 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	2220      	movs	r2, #32
 80023fc:	409a      	lsls	r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b05      	cmp	r3, #5
 800240c:	d136      	bne.n	800247c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0216 	bic.w	r2, r2, #22
 800241c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800242c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <HAL_DMA_IRQHandler+0x1da>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0208 	bic.w	r2, r2, #8
 800244c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	223f      	movs	r2, #63	; 0x3f
 8002454:	409a      	lsls	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246e:	2b00      	cmp	r3, #0
 8002470:	d07d      	beq.n	800256e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
        }
        return;
 800247a:	e078      	b.n	800256e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01c      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d108      	bne.n	80024aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249c:	2b00      	cmp	r3, #0
 800249e:	d030      	beq.n	8002502 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4798      	blx	r3
 80024a8:	e02b      	b.n	8002502 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d027      	beq.n	8002502 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	4798      	blx	r3
 80024ba:	e022      	b.n	8002502 <HAL_DMA_IRQHandler+0x29e>
 80024bc:	20000004 	.word	0x20000004
 80024c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0210 	bic.w	r2, r2, #16
 80024e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	2b00      	cmp	r3, #0
 8002508:	d032      	beq.n	8002570 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d022      	beq.n	800255c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2205      	movs	r2, #5
 800251a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0201 	bic.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	3301      	adds	r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	429a      	cmp	r2, r3
 8002538:	d307      	bcc.n	800254a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f2      	bne.n	800252e <HAL_DMA_IRQHandler+0x2ca>
 8002548:	e000      	b.n	800254c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800254a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4798      	blx	r3
 800256c:	e000      	b.n	8002570 <HAL_DMA_IRQHandler+0x30c>
        return;
 800256e:	bf00      	nop
    }
  }
}
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop

08002578 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002586:	b2db      	uxtb	r3, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d108      	bne.n	80025d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025d2:	e007      	b.n	80025e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	60da      	str	r2, [r3, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	3b10      	subs	r3, #16
 8002600:	4a14      	ldr	r2, [pc, #80]	; (8002654 <DMA_CalcBaseAndBitshift+0x64>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	091b      	lsrs	r3, r3, #4
 8002608:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800260a:	4a13      	ldr	r2, [pc, #76]	; (8002658 <DMA_CalcBaseAndBitshift+0x68>)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4413      	add	r3, r2
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d909      	bls.n	8002632 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002626:	f023 0303 	bic.w	r3, r3, #3
 800262a:	1d1a      	adds	r2, r3, #4
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	659a      	str	r2, [r3, #88]	; 0x58
 8002630:	e007      	b.n	8002642 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	aaaaaaab 	.word	0xaaaaaaab
 8002658:	08007a68 	.word	0x08007a68

0800265c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d11f      	bne.n	80026b6 <DMA_CheckFifoParam+0x5a>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d856      	bhi.n	800272a <DMA_CheckFifoParam+0xce>
 800267c:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <DMA_CheckFifoParam+0x28>)
 800267e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002682:	bf00      	nop
 8002684:	08002695 	.word	0x08002695
 8002688:	080026a7 	.word	0x080026a7
 800268c:	08002695 	.word	0x08002695
 8002690:	0800272b 	.word	0x0800272b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d046      	beq.n	800272e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a4:	e043      	b.n	800272e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026ae:	d140      	bne.n	8002732 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b4:	e03d      	b.n	8002732 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026be:	d121      	bne.n	8002704 <DMA_CheckFifoParam+0xa8>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d837      	bhi.n	8002736 <DMA_CheckFifoParam+0xda>
 80026c6:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <DMA_CheckFifoParam+0x70>)
 80026c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026cc:	080026dd 	.word	0x080026dd
 80026d0:	080026e3 	.word	0x080026e3
 80026d4:	080026dd 	.word	0x080026dd
 80026d8:	080026f5 	.word	0x080026f5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      break;
 80026e0:	e030      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d025      	beq.n	800273a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f2:	e022      	b.n	800273a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026fc:	d11f      	bne.n	800273e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002702:	e01c      	b.n	800273e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d903      	bls.n	8002712 <DMA_CheckFifoParam+0xb6>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d003      	beq.n	8002718 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002710:	e018      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
      break;
 8002716:	e015      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00e      	beq.n	8002742 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
      break;
 8002728:	e00b      	b.n	8002742 <DMA_CheckFifoParam+0xe6>
      break;
 800272a:	bf00      	nop
 800272c:	e00a      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;
 800272e:	bf00      	nop
 8002730:	e008      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;
 8002732:	bf00      	nop
 8002734:	e006      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;
 8002736:	bf00      	nop
 8002738:	e004      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;
 800273a:	bf00      	nop
 800273c:	e002      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;   
 800273e:	bf00      	nop
 8002740:	e000      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;
 8002742:	bf00      	nop
    }
  } 
  
  return status; 
 8002744:	7bfb      	ldrb	r3, [r7, #15]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop

08002754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	; 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	e177      	b.n	8002a60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002770:	2201      	movs	r2, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	429a      	cmp	r2, r3
 800278a:	f040 8166 	bne.w	8002a5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d005      	beq.n	80027a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d130      	bne.n	8002808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	2203      	movs	r2, #3
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027dc:	2201      	movs	r2, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 0201 	and.w	r2, r3, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b03      	cmp	r3, #3
 8002812:	d017      	beq.n	8002844 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d123      	bne.n	8002898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	08da      	lsrs	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3208      	adds	r2, #8
 8002858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	220f      	movs	r2, #15
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	08da      	lsrs	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3208      	adds	r2, #8
 8002892:	69b9      	ldr	r1, [r7, #24]
 8002894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0203 	and.w	r2, r3, #3
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80c0 	beq.w	8002a5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	4b66      	ldr	r3, [pc, #408]	; (8002a78 <HAL_GPIO_Init+0x324>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4a65      	ldr	r2, [pc, #404]	; (8002a78 <HAL_GPIO_Init+0x324>)
 80028e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ea:	4b63      	ldr	r3, [pc, #396]	; (8002a78 <HAL_GPIO_Init+0x324>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028f6:	4a61      	ldr	r2, [pc, #388]	; (8002a7c <HAL_GPIO_Init+0x328>)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	089b      	lsrs	r3, r3, #2
 80028fc:	3302      	adds	r3, #2
 80028fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	220f      	movs	r2, #15
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <HAL_GPIO_Init+0x32c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d037      	beq.n	8002992 <HAL_GPIO_Init+0x23e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a57      	ldr	r2, [pc, #348]	; (8002a84 <HAL_GPIO_Init+0x330>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d031      	beq.n	800298e <HAL_GPIO_Init+0x23a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a56      	ldr	r2, [pc, #344]	; (8002a88 <HAL_GPIO_Init+0x334>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d02b      	beq.n	800298a <HAL_GPIO_Init+0x236>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a55      	ldr	r2, [pc, #340]	; (8002a8c <HAL_GPIO_Init+0x338>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d025      	beq.n	8002986 <HAL_GPIO_Init+0x232>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a54      	ldr	r2, [pc, #336]	; (8002a90 <HAL_GPIO_Init+0x33c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01f      	beq.n	8002982 <HAL_GPIO_Init+0x22e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a53      	ldr	r2, [pc, #332]	; (8002a94 <HAL_GPIO_Init+0x340>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d019      	beq.n	800297e <HAL_GPIO_Init+0x22a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a52      	ldr	r2, [pc, #328]	; (8002a98 <HAL_GPIO_Init+0x344>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_GPIO_Init+0x226>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a51      	ldr	r2, [pc, #324]	; (8002a9c <HAL_GPIO_Init+0x348>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00d      	beq.n	8002976 <HAL_GPIO_Init+0x222>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a50      	ldr	r2, [pc, #320]	; (8002aa0 <HAL_GPIO_Init+0x34c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d007      	beq.n	8002972 <HAL_GPIO_Init+0x21e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4f      	ldr	r2, [pc, #316]	; (8002aa4 <HAL_GPIO_Init+0x350>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d101      	bne.n	800296e <HAL_GPIO_Init+0x21a>
 800296a:	2309      	movs	r3, #9
 800296c:	e012      	b.n	8002994 <HAL_GPIO_Init+0x240>
 800296e:	230a      	movs	r3, #10
 8002970:	e010      	b.n	8002994 <HAL_GPIO_Init+0x240>
 8002972:	2308      	movs	r3, #8
 8002974:	e00e      	b.n	8002994 <HAL_GPIO_Init+0x240>
 8002976:	2307      	movs	r3, #7
 8002978:	e00c      	b.n	8002994 <HAL_GPIO_Init+0x240>
 800297a:	2306      	movs	r3, #6
 800297c:	e00a      	b.n	8002994 <HAL_GPIO_Init+0x240>
 800297e:	2305      	movs	r3, #5
 8002980:	e008      	b.n	8002994 <HAL_GPIO_Init+0x240>
 8002982:	2304      	movs	r3, #4
 8002984:	e006      	b.n	8002994 <HAL_GPIO_Init+0x240>
 8002986:	2303      	movs	r3, #3
 8002988:	e004      	b.n	8002994 <HAL_GPIO_Init+0x240>
 800298a:	2302      	movs	r3, #2
 800298c:	e002      	b.n	8002994 <HAL_GPIO_Init+0x240>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_GPIO_Init+0x240>
 8002992:	2300      	movs	r3, #0
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	f002 0203 	and.w	r2, r2, #3
 800299a:	0092      	lsls	r2, r2, #2
 800299c:	4093      	lsls	r3, r2
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029a4:	4935      	ldr	r1, [pc, #212]	; (8002a7c <HAL_GPIO_Init+0x328>)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029b2:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d6:	4a34      	ldr	r2, [pc, #208]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029dc:	4b32      	ldr	r3, [pc, #200]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a00:	4a29      	ldr	r2, [pc, #164]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a06:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a2a:	4a1f      	ldr	r2, [pc, #124]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a30:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b0f      	cmp	r3, #15
 8002a64:	f67f ae84 	bls.w	8002770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40013800 	.word	0x40013800
 8002a80:	40020000 	.word	0x40020000
 8002a84:	40020400 	.word	0x40020400
 8002a88:	40020800 	.word	0x40020800
 8002a8c:	40020c00 	.word	0x40020c00
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40021400 	.word	0x40021400
 8002a98:	40021800 	.word	0x40021800
 8002a9c:	40021c00 	.word	0x40021c00
 8002aa0:	40022000 	.word	0x40022000
 8002aa4:	40022400 	.word	0x40022400
 8002aa8:	40013c00 	.word	0x40013c00

08002aac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ac2:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fc46 	bl	800135c <HAL_GPIO_EXTI_Callback>
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40013c00 	.word	0x40013c00

08002adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e12b      	b.n	8002d46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe faec 	bl	80010e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2224      	movs	r2, #36	; 0x24
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b40:	f002 fff0 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 8002b44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4a81      	ldr	r2, [pc, #516]	; (8002d50 <HAL_I2C_Init+0x274>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d807      	bhi.n	8002b60 <HAL_I2C_Init+0x84>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a80      	ldr	r2, [pc, #512]	; (8002d54 <HAL_I2C_Init+0x278>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	bf94      	ite	ls
 8002b58:	2301      	movls	r3, #1
 8002b5a:	2300      	movhi	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	e006      	b.n	8002b6e <HAL_I2C_Init+0x92>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a7d      	ldr	r2, [pc, #500]	; (8002d58 <HAL_I2C_Init+0x27c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	bf94      	ite	ls
 8002b68:	2301      	movls	r3, #1
 8002b6a:	2300      	movhi	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e0e7      	b.n	8002d46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4a78      	ldr	r2, [pc, #480]	; (8002d5c <HAL_I2C_Init+0x280>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	0c9b      	lsrs	r3, r3, #18
 8002b80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4a6a      	ldr	r2, [pc, #424]	; (8002d50 <HAL_I2C_Init+0x274>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d802      	bhi.n	8002bb0 <HAL_I2C_Init+0xd4>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	3301      	adds	r3, #1
 8002bae:	e009      	b.n	8002bc4 <HAL_I2C_Init+0xe8>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bb6:	fb02 f303 	mul.w	r3, r2, r3
 8002bba:	4a69      	ldr	r2, [pc, #420]	; (8002d60 <HAL_I2C_Init+0x284>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	099b      	lsrs	r3, r3, #6
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	495c      	ldr	r1, [pc, #368]	; (8002d50 <HAL_I2C_Init+0x274>)
 8002be0:	428b      	cmp	r3, r1
 8002be2:	d819      	bhi.n	8002c18 <HAL_I2C_Init+0x13c>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1e59      	subs	r1, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bf2:	1c59      	adds	r1, r3, #1
 8002bf4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bf8:	400b      	ands	r3, r1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_I2C_Init+0x138>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1e59      	subs	r1, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c12:	e051      	b.n	8002cb8 <HAL_I2C_Init+0x1dc>
 8002c14:	2304      	movs	r3, #4
 8002c16:	e04f      	b.n	8002cb8 <HAL_I2C_Init+0x1dc>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d111      	bne.n	8002c44 <HAL_I2C_Init+0x168>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1e58      	subs	r0, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6859      	ldr	r1, [r3, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	440b      	add	r3, r1
 8002c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	e012      	b.n	8002c6a <HAL_I2C_Init+0x18e>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1e58      	subs	r0, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6859      	ldr	r1, [r3, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	0099      	lsls	r1, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_Init+0x196>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e022      	b.n	8002cb8 <HAL_I2C_Init+0x1dc>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10e      	bne.n	8002c98 <HAL_I2C_Init+0x1bc>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1e58      	subs	r0, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	460b      	mov	r3, r1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	440b      	add	r3, r1
 8002c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c96:	e00f      	b.n	8002cb8 <HAL_I2C_Init+0x1dc>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1e58      	subs	r0, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	0099      	lsls	r1, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	6809      	ldr	r1, [r1, #0]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69da      	ldr	r2, [r3, #28]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ce6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6911      	ldr	r1, [r2, #16]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68d2      	ldr	r2, [r2, #12]
 8002cf2:	4311      	orrs	r1, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	000186a0 	.word	0x000186a0
 8002d54:	001e847f 	.word	0x001e847f
 8002d58:	003d08ff 	.word	0x003d08ff
 8002d5c:	431bde83 	.word	0x431bde83
 8002d60:	10624dd3 	.word	0x10624dd3

08002d64 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	461a      	mov	r2, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	817b      	strh	r3, [r7, #10]
 8002d76:	460b      	mov	r3, r1
 8002d78:	813b      	strh	r3, [r7, #8]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d7e:	f7fe fde1 	bl	8001944 <HAL_GetTick>
 8002d82:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	f040 80d9 	bne.w	8002f44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	2319      	movs	r3, #25
 8002d98:	2201      	movs	r2, #1
 8002d9a:	496d      	ldr	r1, [pc, #436]	; (8002f50 <HAL_I2C_Mem_Write+0x1ec>)
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f001 ffcf 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
 8002daa:	e0cc      	b.n	8002f46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_I2C_Mem_Write+0x56>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e0c5      	b.n	8002f46 <HAL_I2C_Mem_Write+0x1e2>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d007      	beq.n	8002de0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2221      	movs	r2, #33	; 0x21
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2240      	movs	r2, #64	; 0x40
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a3a      	ldr	r2, [r7, #32]
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a4d      	ldr	r2, [pc, #308]	; (8002f54 <HAL_I2C_Mem_Write+0x1f0>)
 8002e20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e22:	88f8      	ldrh	r0, [r7, #6]
 8002e24:	893a      	ldrh	r2, [r7, #8]
 8002e26:	8979      	ldrh	r1, [r7, #10]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	4603      	mov	r3, r0
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f001 fd5e 	bl	80048f4 <I2C_RequestMemoryWrite>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d052      	beq.n	8002ee4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e081      	b.n	8002f46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f002 f850 	bl	8004eec <I2C_WaitOnTXEFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d107      	bne.n	8002e6a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e06b      	b.n	8002f46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	781a      	ldrb	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d11b      	bne.n	8002ee4 <HAL_I2C_Mem_Write+0x180>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d017      	beq.n	8002ee4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1aa      	bne.n	8002e42 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f002 f83c 	bl	8004f6e <I2C_WaitOnBTFFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00d      	beq.n	8002f18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d107      	bne.n	8002f14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e016      	b.n	8002f46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e000      	b.n	8002f46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f44:	2302      	movs	r3, #2
  }
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	00100002 	.word	0x00100002
 8002f54:	ffff0000 	.word	0xffff0000

08002f58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08c      	sub	sp, #48	; 0x30
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	4608      	mov	r0, r1
 8002f62:	4611      	mov	r1, r2
 8002f64:	461a      	mov	r2, r3
 8002f66:	4603      	mov	r3, r0
 8002f68:	817b      	strh	r3, [r7, #10]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	813b      	strh	r3, [r7, #8]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f72:	f7fe fce7 	bl	8001944 <HAL_GetTick>
 8002f76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	f040 8208 	bne.w	8003396 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	2319      	movs	r3, #25
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	497b      	ldr	r1, [pc, #492]	; (800317c <HAL_I2C_Mem_Read+0x224>)
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f001 fed5 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e1fb      	b.n	8003398 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_I2C_Mem_Read+0x56>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e1f4      	b.n	8003398 <HAL_I2C_Mem_Read+0x440>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d007      	beq.n	8002fd4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fe2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2222      	movs	r2, #34	; 0x22
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2240      	movs	r2, #64	; 0x40
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003004:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4a5b      	ldr	r2, [pc, #364]	; (8003180 <HAL_I2C_Mem_Read+0x228>)
 8003014:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003016:	88f8      	ldrh	r0, [r7, #6]
 8003018:	893a      	ldrh	r2, [r7, #8]
 800301a:	8979      	ldrh	r1, [r7, #10]
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	4603      	mov	r3, r0
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f001 fcfa 	bl	8004a20 <I2C_RequestMemoryRead>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e1b0      	b.n	8003398 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303a:	2b00      	cmp	r3, #0
 800303c:	d113      	bne.n	8003066 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303e:	2300      	movs	r3, #0
 8003040:	623b      	str	r3, [r7, #32]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	623b      	str	r3, [r7, #32]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	623b      	str	r3, [r7, #32]
 8003052:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e184      	b.n	8003370 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306a:	2b01      	cmp	r3, #1
 800306c:	d11b      	bne.n	80030a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800307c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	e164      	b.n	8003370 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d11b      	bne.n	80030e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ce:	2300      	movs	r3, #0
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	e144      	b.n	8003370 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030fc:	e138      	b.n	8003370 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003102:	2b03      	cmp	r3, #3
 8003104:	f200 80f1 	bhi.w	80032ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310c:	2b01      	cmp	r3, #1
 800310e:	d123      	bne.n	8003158 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003112:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f001 ff9d 	bl	8005054 <I2C_WaitOnRXNEFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e139      	b.n	8003398 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003156:	e10b      	b.n	8003370 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	2b02      	cmp	r3, #2
 800315e:	d14e      	bne.n	80031fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003166:	2200      	movs	r2, #0
 8003168:	4906      	ldr	r1, [pc, #24]	; (8003184 <HAL_I2C_Mem_Read+0x22c>)
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f001 fde8 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e10e      	b.n	8003398 <HAL_I2C_Mem_Read+0x440>
 800317a:	bf00      	nop
 800317c:	00100002 	.word	0x00100002
 8003180:	ffff0000 	.word	0xffff0000
 8003184:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003196:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031fc:	e0b8      	b.n	8003370 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	2200      	movs	r2, #0
 8003206:	4966      	ldr	r1, [pc, #408]	; (80033a0 <HAL_I2C_Mem_Read+0x448>)
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f001 fd99 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0bf      	b.n	8003398 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003260:	2200      	movs	r2, #0
 8003262:	494f      	ldr	r1, [pc, #316]	; (80033a0 <HAL_I2C_Mem_Read+0x448>)
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f001 fd6b 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e091      	b.n	8003398 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003282:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032e8:	e042      	b.n	8003370 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f001 feb0 	bl	8005054 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e04c      	b.n	8003398 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d118      	bne.n	8003370 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	2b00      	cmp	r3, #0
 8003376:	f47f aec2 	bne.w	80030fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	e000      	b.n	8003398 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003396:	2302      	movs	r3, #2
  }
}
 8003398:	4618      	mov	r0, r3
 800339a:	3728      	adds	r7, #40	; 0x28
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	00010004 	.word	0x00010004

080033a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033cc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d003      	beq.n	80033dc <HAL_I2C_EV_IRQHandler+0x38>
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	2b40      	cmp	r3, #64	; 0x40
 80033d8:	f040 80bd 	bne.w	8003556 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10d      	bne.n	8003412 <HAL_I2C_EV_IRQHandler+0x6e>
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80033fc:	d003      	beq.n	8003406 <HAL_I2C_EV_IRQHandler+0x62>
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003404:	d101      	bne.n	800340a <HAL_I2C_EV_IRQHandler+0x66>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <HAL_I2C_EV_IRQHandler+0x68>
 800340a:	2300      	movs	r3, #0
 800340c:	2b01      	cmp	r3, #1
 800340e:	f000 812e 	beq.w	800366e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00c      	beq.n	8003436 <HAL_I2C_EV_IRQHandler+0x92>
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	0a5b      	lsrs	r3, r3, #9
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d006      	beq.n	8003436 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f001 fe98 	bl	800515e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fcbb 	bl	8003daa <I2C_Master_SB>
 8003434:	e08e      	b.n	8003554 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	08db      	lsrs	r3, r3, #3
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_I2C_EV_IRQHandler+0xb2>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	0a5b      	lsrs	r3, r3, #9
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fd31 	bl	8003eb6 <I2C_Master_ADD10>
 8003454:	e07e      	b.n	8003554 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <HAL_I2C_EV_IRQHandler+0xd2>
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	0a5b      	lsrs	r3, r3, #9
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fd4b 	bl	8003f0a <I2C_Master_ADDR>
 8003474:	e06e      	b.n	8003554 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d037      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800348c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003490:	f000 80ef 	beq.w	8003672 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	09db      	lsrs	r3, r3, #7
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00f      	beq.n	80034c0 <HAL_I2C_EV_IRQHandler+0x11c>
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	0a9b      	lsrs	r3, r3, #10
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d009      	beq.n	80034c0 <HAL_I2C_EV_IRQHandler+0x11c>
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d103      	bne.n	80034c0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f948 	bl	800374e <I2C_MasterTransmit_TXE>
 80034be:	e049      	b.n	8003554 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80d2 	beq.w	8003672 <HAL_I2C_EV_IRQHandler+0x2ce>
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	0a5b      	lsrs	r3, r3, #9
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80cb 	beq.w	8003672 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d103      	bne.n	80034ea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f9cf 	bl	8003886 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034e8:	e0c3      	b.n	8003672 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fa33 	bl	8003956 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034f0:	e0bf      	b.n	8003672 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003500:	f000 80b7 	beq.w	8003672 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	099b      	lsrs	r3, r3, #6
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00f      	beq.n	8003530 <HAL_I2C_EV_IRQHandler+0x18c>
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	0a9b      	lsrs	r3, r3, #10
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d009      	beq.n	8003530 <HAL_I2C_EV_IRQHandler+0x18c>
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d103      	bne.n	8003530 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 faa3 	bl	8003a74 <I2C_MasterReceive_RXNE>
 800352e:	e011      	b.n	8003554 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	089b      	lsrs	r3, r3, #2
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 809a 	beq.w	8003672 <HAL_I2C_EV_IRQHandler+0x2ce>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	0a5b      	lsrs	r3, r3, #9
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8093 	beq.w	8003672 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fb42 	bl	8003bd6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003552:	e08e      	b.n	8003672 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003554:	e08d      	b.n	8003672 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d004      	beq.n	8003568 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	e007      	b.n	8003578 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d012      	beq.n	80035aa <HAL_I2C_EV_IRQHandler+0x206>
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	0a5b      	lsrs	r3, r3, #9
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00c      	beq.n	80035aa <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80035a0:	69b9      	ldr	r1, [r7, #24]
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 ff00 	bl	80043a8 <I2C_Slave_ADDR>
 80035a8:	e066      	b.n	8003678 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d009      	beq.n	80035ca <HAL_I2C_EV_IRQHandler+0x226>
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 ff34 	bl	8004430 <I2C_Slave_STOPF>
 80035c8:	e056      	b.n	8003678 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035ca:	7bbb      	ldrb	r3, [r7, #14]
 80035cc:	2b21      	cmp	r3, #33	; 0x21
 80035ce:	d002      	beq.n	80035d6 <HAL_I2C_EV_IRQHandler+0x232>
 80035d0:	7bbb      	ldrb	r3, [r7, #14]
 80035d2:	2b29      	cmp	r3, #41	; 0x29
 80035d4:	d125      	bne.n	8003622 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	09db      	lsrs	r3, r3, #7
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00f      	beq.n	8003602 <HAL_I2C_EV_IRQHandler+0x25e>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	0a9b      	lsrs	r3, r3, #10
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_I2C_EV_IRQHandler+0x25e>
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d103      	bne.n	8003602 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fe16 	bl	800422c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003600:	e039      	b.n	8003676 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	089b      	lsrs	r3, r3, #2
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d033      	beq.n	8003676 <HAL_I2C_EV_IRQHandler+0x2d2>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	0a5b      	lsrs	r3, r3, #9
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d02d      	beq.n	8003676 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fe43 	bl	80042a6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003620:	e029      	b.n	8003676 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	099b      	lsrs	r3, r3, #6
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00f      	beq.n	800364e <HAL_I2C_EV_IRQHandler+0x2aa>
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	0a9b      	lsrs	r3, r3, #10
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <HAL_I2C_EV_IRQHandler+0x2aa>
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	089b      	lsrs	r3, r3, #2
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d103      	bne.n	800364e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fe4e 	bl	80042e8 <I2C_SlaveReceive_RXNE>
 800364c:	e014      	b.n	8003678 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00e      	beq.n	8003678 <HAL_I2C_EV_IRQHandler+0x2d4>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	0a5b      	lsrs	r3, r3, #9
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fe7c 	bl	8004364 <I2C_SlaveReceive_BTF>
 800366c:	e004      	b.n	8003678 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800366e:	bf00      	nop
 8003670:	e002      	b.n	8003678 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003676:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003678:	3720      	adds	r7, #32
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	460b      	mov	r3, r1
 80036d8:	70fb      	strb	r3, [r7, #3]
 80036da:	4613      	mov	r3, r2
 80036dc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003764:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	2b00      	cmp	r3, #0
 8003772:	d150      	bne.n	8003816 <I2C_MasterTransmit_TXE+0xc8>
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b21      	cmp	r3, #33	; 0x21
 8003778:	d14d      	bne.n	8003816 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b08      	cmp	r3, #8
 800377e:	d01d      	beq.n	80037bc <I2C_MasterTransmit_TXE+0x6e>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b20      	cmp	r3, #32
 8003784:	d01a      	beq.n	80037bc <I2C_MasterTransmit_TXE+0x6e>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800378c:	d016      	beq.n	80037bc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800379c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2211      	movs	r2, #17
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff62 	bl	800367e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037ba:	e060      	b.n	800387e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037ca:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037da:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d107      	bne.n	8003806 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff ff7d 	bl	80036fe <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003804:	e03b      	b.n	800387e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ff35 	bl	800367e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003814:	e033      	b.n	800387e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	2b21      	cmp	r3, #33	; 0x21
 800381a:	d005      	beq.n	8003828 <I2C_MasterTransmit_TXE+0xda>
 800381c:	7bbb      	ldrb	r3, [r7, #14]
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d12d      	bne.n	800387e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	2b22      	cmp	r3, #34	; 0x22
 8003826:	d12a      	bne.n	800387e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d108      	bne.n	8003844 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003840:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003842:	e01c      	b.n	800387e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d103      	bne.n	8003858 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f880 	bl	8003956 <I2C_MemoryTransmit_TXE_BTF>
}
 8003856:	e012      	b.n	800387e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	781a      	ldrb	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800387c:	e7ff      	b.n	800387e <I2C_MasterTransmit_TXE+0x130>
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b21      	cmp	r3, #33	; 0x21
 800389e:	d156      	bne.n	800394e <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d012      	beq.n	80038d0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80038ce:	e03e      	b.n	800394e <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d01d      	beq.n	8003912 <I2C_MasterTransmit_BTF+0x8c>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d01a      	beq.n	8003912 <I2C_MasterTransmit_BTF+0x8c>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038e2:	d016      	beq.n	8003912 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038f2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2211      	movs	r2, #17
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff feb7 	bl	800367e <HAL_I2C_MasterTxCpltCallback>
}
 8003910:	e01d      	b.n	800394e <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003920:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003930:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff fe98 	bl	800367e <HAL_I2C_MasterTxCpltCallback>
}
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003964:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396a:	2b00      	cmp	r3, #0
 800396c:	d11d      	bne.n	80039aa <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	2b01      	cmp	r3, #1
 8003974:	d10b      	bne.n	800398e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397a:	b2da      	uxtb	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003986:	1c9a      	adds	r2, r3, #2
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800398c:	e06e      	b.n	8003a6c <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003992:	b29b      	uxth	r3, r3
 8003994:	121b      	asrs	r3, r3, #8
 8003996:	b2da      	uxtb	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039a8:	e060      	b.n	8003a6c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d10b      	bne.n	80039ca <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039c8:	e050      	b.n	8003a6c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d14c      	bne.n	8003a6c <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	2b22      	cmp	r3, #34	; 0x22
 80039d6:	d108      	bne.n	80039ea <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e6:	601a      	str	r2, [r3, #0]
}
 80039e8:	e040      	b.n	8003a6c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d015      	beq.n	8003a20 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b21      	cmp	r3, #33	; 0x21
 80039f8:	d112      	bne.n	8003a20 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	781a      	ldrb	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a1e:	e025      	b.n	8003a6c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d120      	bne.n	8003a6c <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	2b21      	cmp	r3, #33	; 0x21
 8003a2e:	d11d      	bne.n	8003a6c <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a3e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff fe49 	bl	80036fe <HAL_I2C_MemTxCpltCallback>
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b22      	cmp	r3, #34	; 0x22
 8003a86:	f040 80a2 	bne.w	8003bce <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d921      	bls.n	8003adc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	f040 8082 	bne.w	8003bce <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003ada:	e078      	b.n	8003bce <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d074      	beq.n	8003bce <I2C_MasterReceive_RXNE+0x15a>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d002      	beq.n	8003af0 <I2C_MasterReceive_RXNE+0x7c>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d16e      	bne.n	8003bce <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f001 fa7d 	bl	8004ff0 <I2C_WaitOnSTOPRequestThroughIT>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d142      	bne.n	8003b82 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b0a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b1a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b40      	cmp	r3, #64	; 0x40
 8003b54:	d10a      	bne.n	8003b6c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff fdd4 	bl	8003712 <HAL_I2C_MemRxCpltCallback>
}
 8003b6a:	e030      	b.n	8003bce <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2212      	movs	r2, #18
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff fd89 	bl	8003692 <HAL_I2C_MasterRxCpltCallback>
}
 8003b80:	e025      	b.n	8003bce <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b90:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff fdac 	bl	8003726 <HAL_I2C_ErrorCallback>
}
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d11b      	bne.n	8003c26 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c24:	e0bd      	b.n	8003da2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d129      	bne.n	8003c84 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d00a      	beq.n	8003c5c <I2C_MasterReceive_BTF+0x86>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d007      	beq.n	8003c5c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c5a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c82:	e08e      	b.n	8003da2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d176      	bne.n	8003d7c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d002      	beq.n	8003c9a <I2C_MasterReceive_BTF+0xc4>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b10      	cmp	r3, #16
 8003c98:	d108      	bne.n	8003cac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e019      	b.n	8003ce0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d002      	beq.n	8003cb8 <I2C_MasterReceive_BTF+0xe2>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d108      	bne.n	8003cca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	e00a      	b.n	8003ce0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d007      	beq.n	8003ce0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cde:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d3a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b40      	cmp	r3, #64	; 0x40
 8003d4e:	d10a      	bne.n	8003d66 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff fcd7 	bl	8003712 <HAL_I2C_MemRxCpltCallback>
}
 8003d64:	e01d      	b.n	8003da2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2212      	movs	r2, #18
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff fc8c 	bl	8003692 <HAL_I2C_MasterRxCpltCallback>
}
 8003d7a:	e012      	b.n	8003da2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	d117      	bne.n	8003dee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dd6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003dd8:	e067      	b.n	8003eaa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	611a      	str	r2, [r3, #16]
}
 8003dec:	e05d      	b.n	8003eaa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003df6:	d133      	bne.n	8003e60 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b21      	cmp	r3, #33	; 0x21
 8003e02:	d109      	bne.n	8003e18 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e14:	611a      	str	r2, [r3, #16]
 8003e16:	e008      	b.n	8003e2a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d004      	beq.n	8003e3c <I2C_Master_SB+0x92>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d108      	bne.n	8003e4e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d032      	beq.n	8003eaa <I2C_Master_SB+0x100>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d02d      	beq.n	8003eaa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e5c:	605a      	str	r2, [r3, #4]
}
 8003e5e:	e024      	b.n	8003eaa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10e      	bne.n	8003e86 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	11db      	asrs	r3, r3, #7
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f003 0306 	and.w	r3, r3, #6
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f063 030f 	orn	r3, r3, #15
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	611a      	str	r2, [r3, #16]
}
 8003e84:	e011      	b.n	8003eaa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d10d      	bne.n	8003eaa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	11db      	asrs	r3, r3, #7
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f003 0306 	and.w	r3, r3, #6
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f063 030e 	orn	r3, r3, #14
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	611a      	str	r2, [r3, #16]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <I2C_Master_ADD10+0x26>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d108      	bne.n	8003eee <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00c      	beq.n	8003efe <I2C_Master_ADD10+0x48>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003efc:	605a      	str	r2, [r3, #4]
  }
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b091      	sub	sp, #68	; 0x44
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b22      	cmp	r3, #34	; 0x22
 8003f32:	f040 8169 	bne.w	8004208 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10f      	bne.n	8003f5e <I2C_Master_ADDR+0x54>
 8003f3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f42:	2b40      	cmp	r3, #64	; 0x40
 8003f44:	d10b      	bne.n	8003f5e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f46:	2300      	movs	r3, #0
 8003f48:	633b      	str	r3, [r7, #48]	; 0x30
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	633b      	str	r3, [r7, #48]	; 0x30
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	633b      	str	r3, [r7, #48]	; 0x30
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	e160      	b.n	8004220 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d11d      	bne.n	8003fa2 <I2C_Master_ADDR+0x98>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f6e:	d118      	bne.n	8003fa2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f70:	2300      	movs	r3, #0
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f94:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	651a      	str	r2, [r3, #80]	; 0x50
 8003fa0:	e13e      	b.n	8004220 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d113      	bne.n	8003fd4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fac:	2300      	movs	r3, #0
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e115      	b.n	8004200 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	f040 808a 	bne.w	80040f4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fe6:	d137      	bne.n	8004058 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004006:	d113      	bne.n	8004030 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004016:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004018:	2300      	movs	r3, #0
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	e0e7      	b.n	8004200 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004030:	2300      	movs	r3, #0
 8004032:	623b      	str	r3, [r7, #32]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	623b      	str	r3, [r7, #32]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	623b      	str	r3, [r7, #32]
 8004044:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e0d3      	b.n	8004200 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405a:	2b08      	cmp	r3, #8
 800405c:	d02e      	beq.n	80040bc <I2C_Master_ADDR+0x1b2>
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	2b20      	cmp	r3, #32
 8004062:	d02b      	beq.n	80040bc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004066:	2b12      	cmp	r3, #18
 8004068:	d102      	bne.n	8004070 <I2C_Master_ADDR+0x166>
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	2b01      	cmp	r3, #1
 800406e:	d125      	bne.n	80040bc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	2b04      	cmp	r3, #4
 8004074:	d00e      	beq.n	8004094 <I2C_Master_ADDR+0x18a>
 8004076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004078:	2b02      	cmp	r3, #2
 800407a:	d00b      	beq.n	8004094 <I2C_Master_ADDR+0x18a>
 800407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407e:	2b10      	cmp	r3, #16
 8004080:	d008      	beq.n	8004094 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e007      	b.n	80040a4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040a2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a4:	2300      	movs	r3, #0
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	e0a1      	b.n	8004200 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	61bb      	str	r3, [r7, #24]
 80040e0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	e085      	b.n	8004200 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d14d      	bne.n	800419a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004100:	2b04      	cmp	r3, #4
 8004102:	d016      	beq.n	8004132 <I2C_Master_ADDR+0x228>
 8004104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004106:	2b02      	cmp	r3, #2
 8004108:	d013      	beq.n	8004132 <I2C_Master_ADDR+0x228>
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	2b10      	cmp	r3, #16
 800410e:	d010      	beq.n	8004132 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	e007      	b.n	8004142 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004140:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004150:	d117      	bne.n	8004182 <I2C_Master_ADDR+0x278>
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004158:	d00b      	beq.n	8004172 <I2C_Master_ADDR+0x268>
 800415a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415c:	2b01      	cmp	r3, #1
 800415e:	d008      	beq.n	8004172 <I2C_Master_ADDR+0x268>
 8004160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004162:	2b08      	cmp	r3, #8
 8004164:	d005      	beq.n	8004172 <I2C_Master_ADDR+0x268>
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	2b10      	cmp	r3, #16
 800416a:	d002      	beq.n	8004172 <I2C_Master_ADDR+0x268>
 800416c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416e:	2b20      	cmp	r3, #32
 8004170:	d107      	bne.n	8004182 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004180:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	e032      	b.n	8004200 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041a8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b8:	d117      	bne.n	80041ea <I2C_Master_ADDR+0x2e0>
 80041ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041c0:	d00b      	beq.n	80041da <I2C_Master_ADDR+0x2d0>
 80041c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d008      	beq.n	80041da <I2C_Master_ADDR+0x2d0>
 80041c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d005      	beq.n	80041da <I2C_Master_ADDR+0x2d0>
 80041ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d002      	beq.n	80041da <I2C_Master_ADDR+0x2d0>
 80041d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d107      	bne.n	80041ea <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004206:	e00b      	b.n	8004220 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]
}
 800421e:	e7ff      	b.n	8004220 <I2C_Master_ADDR+0x316>
 8004220:	bf00      	nop
 8004222:	3744      	adds	r7, #68	; 0x44
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d02b      	beq.n	800429e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	781a      	ldrb	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d114      	bne.n	800429e <I2C_SlaveTransmit_TXE+0x72>
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	2b29      	cmp	r3, #41	; 0x29
 8004278:	d111      	bne.n	800429e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004288:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2221      	movs	r2, #33	; 0x21
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2228      	movs	r2, #40	; 0x28
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff fa04 	bl	80036a6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d011      	beq.n	80042dc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	781a      	ldrb	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d02c      	beq.n	800435c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d114      	bne.n	800435c <I2C_SlaveReceive_RXNE+0x74>
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	2b2a      	cmp	r3, #42	; 0x2a
 8004336:	d111      	bne.n	800435c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004346:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2222      	movs	r2, #34	; 0x22
 800434c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2228      	movs	r2, #40	; 0x28
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff f9af 	bl	80036ba <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d012      	beq.n	800439c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80043b2:	2300      	movs	r3, #0
 80043b4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043c2:	2b28      	cmp	r3, #40	; 0x28
 80043c4:	d127      	bne.n	8004416 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	089b      	lsrs	r3, r3, #2
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80043e2:	2301      	movs	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	09db      	lsrs	r3, r3, #7
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	81bb      	strh	r3, [r7, #12]
 80043f8:	e002      	b.n	8004400 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004408:	89ba      	ldrh	r2, [r7, #12]
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	4619      	mov	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff f95d 	bl	80036ce <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004414:	e008      	b.n	8004428 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f06f 0202 	mvn.w	r2, #2
 800441e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004428:	bf00      	nop
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800444e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004450:	2300      	movs	r3, #0
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448c:	d172      	bne.n	8004574 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	2b22      	cmp	r3, #34	; 0x22
 8004492:	d002      	beq.n	800449a <I2C_Slave_STOPF+0x6a>
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b2a      	cmp	r3, #42	; 0x2a
 8004498:	d135      	bne.n	8004506 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d005      	beq.n	80044be <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f043 0204 	orr.w	r2, r3, #4
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe f850 	bl	8002578 <HAL_DMA_GetState>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d049      	beq.n	8004572 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	4a69      	ldr	r2, [pc, #420]	; (8004688 <I2C_Slave_STOPF+0x258>)
 80044e4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fd fe98 	bl	8002220 <HAL_DMA_Abort_IT>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d03d      	beq.n	8004572 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004500:	4610      	mov	r0, r2
 8004502:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004504:	e035      	b.n	8004572 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	b29a      	uxth	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d005      	beq.n	800452a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f043 0204 	orr.w	r2, r3, #4
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004538:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe f81a 	bl	8002578 <HAL_DMA_GetState>
 8004544:	4603      	mov	r3, r0
 8004546:	2b01      	cmp	r3, #1
 8004548:	d014      	beq.n	8004574 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454e:	4a4e      	ldr	r2, [pc, #312]	; (8004688 <I2C_Slave_STOPF+0x258>)
 8004550:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004556:	4618      	mov	r0, r3
 8004558:	f7fd fe62 	bl	8002220 <HAL_DMA_Abort_IT>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800456c:	4610      	mov	r0, r2
 800456e:	4798      	blx	r3
 8004570:	e000      	b.n	8004574 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004572:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d03e      	beq.n	80045fc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b04      	cmp	r3, #4
 800458a:	d112      	bne.n	80045b2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	d112      	bne.n	80045e6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	f043 0204 	orr.w	r2, r3, #4
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f843 	bl	8004690 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800460a:	e039      	b.n	8004680 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b2a      	cmp	r3, #42	; 0x2a
 8004610:	d109      	bne.n	8004626 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2228      	movs	r2, #40	; 0x28
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7ff f84a 	bl	80036ba <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b28      	cmp	r3, #40	; 0x28
 8004630:	d111      	bne.n	8004656 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a15      	ldr	r2, [pc, #84]	; (800468c <I2C_Slave_STOPF+0x25c>)
 8004636:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff f84b 	bl	80036ea <HAL_I2C_ListenCpltCallback>
}
 8004654:	e014      	b.n	8004680 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	2b22      	cmp	r3, #34	; 0x22
 800465c:	d002      	beq.n	8004664 <I2C_Slave_STOPF+0x234>
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	2b22      	cmp	r3, #34	; 0x22
 8004662:	d10d      	bne.n	8004680 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff f81d 	bl	80036ba <HAL_I2C_SlaveRxCpltCallback>
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	08004bf1 	.word	0x08004bf1
 800468c:	ffff0000 	.word	0xffff0000

08004690 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046a8:	7bbb      	ldrb	r3, [r7, #14]
 80046aa:	2b10      	cmp	r3, #16
 80046ac:	d002      	beq.n	80046b4 <I2C_ITError+0x24>
 80046ae:	7bbb      	ldrb	r3, [r7, #14]
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d10a      	bne.n	80046ca <I2C_ITError+0x3a>
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b22      	cmp	r3, #34	; 0x22
 80046b8:	d107      	bne.n	80046ca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046d0:	2b28      	cmp	r3, #40	; 0x28
 80046d2:	d107      	bne.n	80046e4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2228      	movs	r2, #40	; 0x28
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046e2:	e015      	b.n	8004710 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f2:	d00a      	beq.n	800470a <I2C_ITError+0x7a>
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b60      	cmp	r3, #96	; 0x60
 80046f8:	d007      	beq.n	800470a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800471e:	d162      	bne.n	80047e6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800472e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b01      	cmp	r3, #1
 800473c:	d020      	beq.n	8004780 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004742:	4a6a      	ldr	r2, [pc, #424]	; (80048ec <I2C_ITError+0x25c>)
 8004744:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474a:	4618      	mov	r0, r3
 800474c:	f7fd fd68 	bl	8002220 <HAL_DMA_Abort_IT>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 8089 	beq.w	800486a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0201 	bic.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800477a:	4610      	mov	r0, r2
 800477c:	4798      	blx	r3
 800477e:	e074      	b.n	800486a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	4a59      	ldr	r2, [pc, #356]	; (80048ec <I2C_ITError+0x25c>)
 8004786:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	4618      	mov	r0, r3
 800478e:	f7fd fd47 	bl	8002220 <HAL_DMA_Abort_IT>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d068      	beq.n	800486a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b40      	cmp	r3, #64	; 0x40
 80047a4:	d10b      	bne.n	80047be <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0201 	bic.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047e0:	4610      	mov	r0, r2
 80047e2:	4798      	blx	r3
 80047e4:	e041      	b.n	800486a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b60      	cmp	r3, #96	; 0x60
 80047f0:	d125      	bne.n	800483e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480a:	2b40      	cmp	r3, #64	; 0x40
 800480c:	d10b      	bne.n	8004826 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0201 	bic.w	r2, r2, #1
 8004834:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fe ff7f 	bl	800373a <HAL_I2C_AbortCpltCallback>
 800483c:	e015      	b.n	800486a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	d10b      	bne.n	8004864 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7fe ff5e 	bl	8003726 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10e      	bne.n	8004898 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800488a:	2b00      	cmp	r3, #0
 800488c:	d104      	bne.n	8004898 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004894:	2b00      	cmp	r3, #0
 8004896:	d007      	beq.n	80048a8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048a6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d113      	bne.n	80048e4 <I2C_ITError+0x254>
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	2b28      	cmp	r3, #40	; 0x28
 80048c0:	d110      	bne.n	80048e4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a0a      	ldr	r2, [pc, #40]	; (80048f0 <I2C_ITError+0x260>)
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fe ff03 	bl	80036ea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	08004bf1 	.word	0x08004bf1
 80048f0:	ffff0000 	.word	0xffff0000

080048f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	4608      	mov	r0, r1
 80048fe:	4611      	mov	r1, r2
 8004900:	461a      	mov	r2, r3
 8004902:	4603      	mov	r3, r0
 8004904:	817b      	strh	r3, [r7, #10]
 8004906:	460b      	mov	r3, r1
 8004908:	813b      	strh	r3, [r7, #8]
 800490a:	4613      	mov	r3, r2
 800490c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800491c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	2200      	movs	r2, #0
 8004926:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 fa08 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00d      	beq.n	8004952 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004944:	d103      	bne.n	800494e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800494c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e05f      	b.n	8004a12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004952:	897b      	ldrh	r3, [r7, #10]
 8004954:	b2db      	uxtb	r3, r3
 8004956:	461a      	mov	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004960:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	6a3a      	ldr	r2, [r7, #32]
 8004966:	492d      	ldr	r1, [pc, #180]	; (8004a1c <I2C_RequestMemoryWrite+0x128>)
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 fa40 	bl	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e04c      	b.n	8004a12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800498e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004990:	6a39      	ldr	r1, [r7, #32]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 faaa 	bl	8004eec <I2C_WaitOnTXEFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00d      	beq.n	80049ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d107      	bne.n	80049b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e02b      	b.n	8004a12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d105      	bne.n	80049cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049c0:	893b      	ldrh	r3, [r7, #8]
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	611a      	str	r2, [r3, #16]
 80049ca:	e021      	b.n	8004a10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049cc:	893b      	ldrh	r3, [r7, #8]
 80049ce:	0a1b      	lsrs	r3, r3, #8
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049dc:	6a39      	ldr	r1, [r7, #32]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 fa84 	bl	8004eec <I2C_WaitOnTXEFlagUntilTimeout>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00d      	beq.n	8004a06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d107      	bne.n	8004a02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e005      	b.n	8004a12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a06:	893b      	ldrh	r3, [r7, #8]
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	00010002 	.word	0x00010002

08004a20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	4608      	mov	r0, r1
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4603      	mov	r3, r0
 8004a30:	817b      	strh	r3, [r7, #10]
 8004a32:	460b      	mov	r3, r1
 8004a34:	813b      	strh	r3, [r7, #8]
 8004a36:	4613      	mov	r3, r2
 8004a38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 f96a 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00d      	beq.n	8004a8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a80:	d103      	bne.n	8004a8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e0aa      	b.n	8004be4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a8e:	897b      	ldrh	r3, [r7, #10]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	6a3a      	ldr	r2, [r7, #32]
 8004aa2:	4952      	ldr	r1, [pc, #328]	; (8004bec <I2C_RequestMemoryRead+0x1cc>)
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f9a2 	bl	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e097      	b.n	8004be4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004acc:	6a39      	ldr	r1, [r7, #32]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fa0c 	bl	8004eec <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00d      	beq.n	8004af6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d107      	bne.n	8004af2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e076      	b.n	8004be4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004af6:	88fb      	ldrh	r3, [r7, #6]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d105      	bne.n	8004b08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004afc:	893b      	ldrh	r3, [r7, #8]
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	611a      	str	r2, [r3, #16]
 8004b06:	e021      	b.n	8004b4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b08:	893b      	ldrh	r3, [r7, #8]
 8004b0a:	0a1b      	lsrs	r3, r3, #8
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b18:	6a39      	ldr	r1, [r7, #32]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 f9e6 	bl	8004eec <I2C_WaitOnTXEFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00d      	beq.n	8004b42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d107      	bne.n	8004b3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e050      	b.n	8004be4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b42:	893b      	ldrh	r3, [r7, #8]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4e:	6a39      	ldr	r1, [r7, #32]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 f9cb 	bl	8004eec <I2C_WaitOnTXEFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00d      	beq.n	8004b78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d107      	bne.n	8004b74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e035      	b.n	8004be4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f8d3 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00d      	beq.n	8004bbc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bae:	d103      	bne.n	8004bb8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e013      	b.n	8004be4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bbc:	897b      	ldrh	r3, [r7, #10]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	f043 0301 	orr.w	r3, r3, #1
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	6a3a      	ldr	r2, [r7, #32]
 8004bd0:	4906      	ldr	r1, [pc, #24]	; (8004bec <I2C_RequestMemoryRead+0x1cc>)
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f90b 	bl	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	00010002 	.word	0x00010002

08004bf0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c08:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c0a:	4b4b      	ldr	r3, [pc, #300]	; (8004d38 <I2C_DMAAbort+0x148>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	08db      	lsrs	r3, r3, #3
 8004c10:	4a4a      	ldr	r2, [pc, #296]	; (8004d3c <I2C_DMAAbort+0x14c>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	0a1a      	lsrs	r2, r3, #8
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	00da      	lsls	r2, r3, #3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004c36:	e00a      	b.n	8004c4e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c4c:	d0ea      	beq.n	8004c24 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c7c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2200      	movs	r2, #0
 8004c82:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c90:	2200      	movs	r2, #0
 8004c92:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0201 	bic.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b60      	cmp	r3, #96	; 0x60
 8004cbe:	d10e      	bne.n	8004cde <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cd6:	6978      	ldr	r0, [r7, #20]
 8004cd8:	f7fe fd2f 	bl	800373a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cdc:	e027      	b.n	8004d2e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cde:	7cfb      	ldrb	r3, [r7, #19]
 8004ce0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ce4:	2b28      	cmp	r3, #40	; 0x28
 8004ce6:	d117      	bne.n	8004d18 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d06:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2228      	movs	r2, #40	; 0x28
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d16:	e007      	b.n	8004d28 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d28:	6978      	ldr	r0, [r7, #20]
 8004d2a:	f7fe fcfc 	bl	8003726 <HAL_I2C_ErrorCallback>
}
 8004d2e:	bf00      	nop
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000004 	.word	0x20000004
 8004d3c:	14f8b589 	.word	0x14f8b589

08004d40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d50:	e025      	b.n	8004d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d021      	beq.n	8004d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5a:	f7fc fdf3 	bl	8001944 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d302      	bcc.n	8004d70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d116      	bne.n	8004d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f043 0220 	orr.w	r2, r3, #32
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e023      	b.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	0c1b      	lsrs	r3, r3, #16
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d10d      	bne.n	8004dc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	43da      	mvns	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4013      	ands	r3, r2
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bf0c      	ite	eq
 8004dba:	2301      	moveq	r3, #1
 8004dbc:	2300      	movne	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	e00c      	b.n	8004dde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	43da      	mvns	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bf0c      	ite	eq
 8004dd6:	2301      	moveq	r3, #1
 8004dd8:	2300      	movne	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d0b6      	beq.n	8004d52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
 8004dfa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dfc:	e051      	b.n	8004ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e0c:	d123      	bne.n	8004e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	f043 0204 	orr.w	r2, r3, #4
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e046      	b.n	8004ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d021      	beq.n	8004ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5e:	f7fc fd71 	bl	8001944 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d302      	bcc.n	8004e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d116      	bne.n	8004ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f043 0220 	orr.w	r2, r3, #32
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e020      	b.n	8004ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	0c1b      	lsrs	r3, r3, #16
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d10c      	bne.n	8004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	43da      	mvns	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bf14      	ite	ne
 8004ebe:	2301      	movne	r3, #1
 8004ec0:	2300      	moveq	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	e00b      	b.n	8004ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	43da      	mvns	r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	bf14      	ite	ne
 8004ed8:	2301      	movne	r3, #1
 8004eda:	2300      	moveq	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d18d      	bne.n	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ef8:	e02d      	b.n	8004f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f900 	bl	8005100 <I2C_IsAcknowledgeFailed>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e02d      	b.n	8004f66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d021      	beq.n	8004f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f12:	f7fc fd17 	bl	8001944 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d302      	bcc.n	8004f28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d116      	bne.n	8004f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f043 0220 	orr.w	r2, r3, #32
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e007      	b.n	8004f66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f60:	2b80      	cmp	r3, #128	; 0x80
 8004f62:	d1ca      	bne.n	8004efa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f7a:	e02d      	b.n	8004fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f8bf 	bl	8005100 <I2C_IsAcknowledgeFailed>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e02d      	b.n	8004fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d021      	beq.n	8004fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f94:	f7fc fcd6 	bl	8001944 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d302      	bcc.n	8004faa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d116      	bne.n	8004fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	f043 0220 	orr.w	r2, r3, #32
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e007      	b.n	8004fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d1ca      	bne.n	8004f7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ffc:	4b13      	ldr	r3, [pc, #76]	; (800504c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	08db      	lsrs	r3, r3, #3
 8005002:	4a13      	ldr	r2, [pc, #76]	; (8005050 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005004:	fba2 2303 	umull	r2, r3, r2, r3
 8005008:	0a1a      	lsrs	r2, r3, #8
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3b01      	subs	r3, #1
 8005016:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d107      	bne.n	800502e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	f043 0220 	orr.w	r2, r3, #32
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e008      	b.n	8005040 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800503c:	d0e9      	beq.n	8005012 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	20000004 	.word	0x20000004
 8005050:	14f8b589 	.word	0x14f8b589

08005054 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005060:	e042      	b.n	80050e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b10      	cmp	r3, #16
 800506e:	d119      	bne.n	80050a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f06f 0210 	mvn.w	r2, #16
 8005078:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e029      	b.n	80050f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a4:	f7fc fc4e 	bl	8001944 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d302      	bcc.n	80050ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d116      	bne.n	80050e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	f043 0220 	orr.w	r2, r3, #32
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e007      	b.n	80050f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f2:	2b40      	cmp	r3, #64	; 0x40
 80050f4:	d1b5      	bne.n	8005062 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005116:	d11b      	bne.n	8005150 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005120:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	f043 0204 	orr.w	r2, r3, #4
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e000      	b.n	8005152 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800516e:	d103      	bne.n	8005178 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005176:	e007      	b.n	8005188 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005180:	d102      	bne.n	8005188 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2208      	movs	r2, #8
 8005186:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d129      	bne.n	80051fe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2224      	movs	r2, #36	; 0x24
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0201 	bic.w	r2, r2, #1
 80051c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0210 	bic.w	r2, r2, #16
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f042 0201 	orr.w	r2, r2, #1
 80051f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	e000      	b.n	8005200 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80051fe:	2302      	movs	r3, #2
  }
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b20      	cmp	r3, #32
 8005224:	d12a      	bne.n	800527c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2224      	movs	r2, #36	; 0x24
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0201 	bic.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005246:	89fb      	ldrh	r3, [r7, #14]
 8005248:	f023 030f 	bic.w	r3, r3, #15
 800524c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	b29a      	uxth	r2, r3
 8005252:	89fb      	ldrh	r3, [r7, #14]
 8005254:	4313      	orrs	r3, r2
 8005256:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	89fa      	ldrh	r2, [r7, #14]
 800525e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	e000      	b.n	800527e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800527c:	2302      	movs	r3, #2
  }
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
	...

0800528c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e264      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d075      	beq.n	8005396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052aa:	4ba3      	ldr	r3, [pc, #652]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d00c      	beq.n	80052d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052b6:	4ba0      	ldr	r3, [pc, #640]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d112      	bne.n	80052e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052c2:	4b9d      	ldr	r3, [pc, #628]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ce:	d10b      	bne.n	80052e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d0:	4b99      	ldr	r3, [pc, #612]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d05b      	beq.n	8005394 <HAL_RCC_OscConfig+0x108>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d157      	bne.n	8005394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e23f      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f0:	d106      	bne.n	8005300 <HAL_RCC_OscConfig+0x74>
 80052f2:	4b91      	ldr	r3, [pc, #580]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a90      	ldr	r2, [pc, #576]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 80052f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e01d      	b.n	800533c <HAL_RCC_OscConfig+0xb0>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005308:	d10c      	bne.n	8005324 <HAL_RCC_OscConfig+0x98>
 800530a:	4b8b      	ldr	r3, [pc, #556]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a8a      	ldr	r2, [pc, #552]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 8005310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	4b88      	ldr	r3, [pc, #544]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a87      	ldr	r2, [pc, #540]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 800531c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	e00b      	b.n	800533c <HAL_RCC_OscConfig+0xb0>
 8005324:	4b84      	ldr	r3, [pc, #528]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a83      	ldr	r2, [pc, #524]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 800532a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	4b81      	ldr	r3, [pc, #516]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a80      	ldr	r2, [pc, #512]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 8005336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800533a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d013      	beq.n	800536c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005344:	f7fc fafe 	bl	8001944 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800534c:	f7fc fafa 	bl	8001944 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b64      	cmp	r3, #100	; 0x64
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e204      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800535e:	4b76      	ldr	r3, [pc, #472]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f0      	beq.n	800534c <HAL_RCC_OscConfig+0xc0>
 800536a:	e014      	b.n	8005396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536c:	f7fc faea 	bl	8001944 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005374:	f7fc fae6 	bl	8001944 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b64      	cmp	r3, #100	; 0x64
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e1f0      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005386:	4b6c      	ldr	r3, [pc, #432]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0xe8>
 8005392:	e000      	b.n	8005396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d063      	beq.n	800546a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053a2:	4b65      	ldr	r3, [pc, #404]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 030c 	and.w	r3, r3, #12
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00b      	beq.n	80053c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ae:	4b62      	ldr	r3, [pc, #392]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d11c      	bne.n	80053f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ba:	4b5f      	ldr	r3, [pc, #380]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d116      	bne.n	80053f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053c6:	4b5c      	ldr	r3, [pc, #368]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <HAL_RCC_OscConfig+0x152>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d001      	beq.n	80053de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e1c4      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053de:	4b56      	ldr	r3, [pc, #344]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	4952      	ldr	r1, [pc, #328]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053f2:	e03a      	b.n	800546a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d020      	beq.n	800543e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053fc:	4b4f      	ldr	r3, [pc, #316]	; (800553c <HAL_RCC_OscConfig+0x2b0>)
 80053fe:	2201      	movs	r2, #1
 8005400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005402:	f7fc fa9f 	bl	8001944 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800540a:	f7fc fa9b 	bl	8001944 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e1a5      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800541c:	4b46      	ldr	r3, [pc, #280]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0f0      	beq.n	800540a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005428:	4b43      	ldr	r3, [pc, #268]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	4940      	ldr	r1, [pc, #256]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 8005438:	4313      	orrs	r3, r2
 800543a:	600b      	str	r3, [r1, #0]
 800543c:	e015      	b.n	800546a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800543e:	4b3f      	ldr	r3, [pc, #252]	; (800553c <HAL_RCC_OscConfig+0x2b0>)
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7fc fa7e 	bl	8001944 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800544c:	f7fc fa7a 	bl	8001944 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e184      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800545e:	4b36      	ldr	r3, [pc, #216]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f0      	bne.n	800544c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d030      	beq.n	80054d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d016      	beq.n	80054ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800547e:	4b30      	ldr	r3, [pc, #192]	; (8005540 <HAL_RCC_OscConfig+0x2b4>)
 8005480:	2201      	movs	r2, #1
 8005482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005484:	f7fc fa5e 	bl	8001944 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800548c:	f7fc fa5a 	bl	8001944 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e164      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800549e:	4b26      	ldr	r3, [pc, #152]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 80054a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f0      	beq.n	800548c <HAL_RCC_OscConfig+0x200>
 80054aa:	e015      	b.n	80054d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ac:	4b24      	ldr	r3, [pc, #144]	; (8005540 <HAL_RCC_OscConfig+0x2b4>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b2:	f7fc fa47 	bl	8001944 <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ba:	f7fc fa43 	bl	8001944 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e14d      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054cc:	4b1a      	ldr	r3, [pc, #104]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 80054ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1f0      	bne.n	80054ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 80a0 	beq.w	8005626 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054e6:	2300      	movs	r3, #0
 80054e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ea:	4b13      	ldr	r3, [pc, #76]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10f      	bne.n	8005516 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054f6:	2300      	movs	r3, #0
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	4a0e      	ldr	r2, [pc, #56]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 8005500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005504:	6413      	str	r3, [r2, #64]	; 0x40
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <HAL_RCC_OscConfig+0x2ac>)
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550e:	60bb      	str	r3, [r7, #8]
 8005510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005512:	2301      	movs	r3, #1
 8005514:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005516:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_RCC_OscConfig+0x2b8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551e:	2b00      	cmp	r3, #0
 8005520:	d121      	bne.n	8005566 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005522:	4b08      	ldr	r3, [pc, #32]	; (8005544 <HAL_RCC_OscConfig+0x2b8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a07      	ldr	r2, [pc, #28]	; (8005544 <HAL_RCC_OscConfig+0x2b8>)
 8005528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800552e:	f7fc fa09 	bl	8001944 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005534:	e011      	b.n	800555a <HAL_RCC_OscConfig+0x2ce>
 8005536:	bf00      	nop
 8005538:	40023800 	.word	0x40023800
 800553c:	42470000 	.word	0x42470000
 8005540:	42470e80 	.word	0x42470e80
 8005544:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005548:	f7fc f9fc 	bl	8001944 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e106      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800555a:	4b85      	ldr	r3, [pc, #532]	; (8005770 <HAL_RCC_OscConfig+0x4e4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0f0      	beq.n	8005548 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d106      	bne.n	800557c <HAL_RCC_OscConfig+0x2f0>
 800556e:	4b81      	ldr	r3, [pc, #516]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 8005570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005572:	4a80      	ldr	r2, [pc, #512]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	6713      	str	r3, [r2, #112]	; 0x70
 800557a:	e01c      	b.n	80055b6 <HAL_RCC_OscConfig+0x32a>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2b05      	cmp	r3, #5
 8005582:	d10c      	bne.n	800559e <HAL_RCC_OscConfig+0x312>
 8005584:	4b7b      	ldr	r3, [pc, #492]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 8005586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005588:	4a7a      	ldr	r2, [pc, #488]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 800558a:	f043 0304 	orr.w	r3, r3, #4
 800558e:	6713      	str	r3, [r2, #112]	; 0x70
 8005590:	4b78      	ldr	r3, [pc, #480]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 8005592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005594:	4a77      	ldr	r2, [pc, #476]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 8005596:	f043 0301 	orr.w	r3, r3, #1
 800559a:	6713      	str	r3, [r2, #112]	; 0x70
 800559c:	e00b      	b.n	80055b6 <HAL_RCC_OscConfig+0x32a>
 800559e:	4b75      	ldr	r3, [pc, #468]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 80055a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a2:	4a74      	ldr	r2, [pc, #464]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 80055a4:	f023 0301 	bic.w	r3, r3, #1
 80055a8:	6713      	str	r3, [r2, #112]	; 0x70
 80055aa:	4b72      	ldr	r3, [pc, #456]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 80055ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ae:	4a71      	ldr	r2, [pc, #452]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 80055b0:	f023 0304 	bic.w	r3, r3, #4
 80055b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d015      	beq.n	80055ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055be:	f7fc f9c1 	bl	8001944 <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c4:	e00a      	b.n	80055dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055c6:	f7fc f9bd 	bl	8001944 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e0c5      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055dc:	4b65      	ldr	r3, [pc, #404]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0ee      	beq.n	80055c6 <HAL_RCC_OscConfig+0x33a>
 80055e8:	e014      	b.n	8005614 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ea:	f7fc f9ab 	bl	8001944 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f0:	e00a      	b.n	8005608 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f2:	f7fc f9a7 	bl	8001944 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005600:	4293      	cmp	r3, r2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e0af      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005608:	4b5a      	ldr	r3, [pc, #360]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 800560a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1ee      	bne.n	80055f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005614:	7dfb      	ldrb	r3, [r7, #23]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d105      	bne.n	8005626 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800561a:	4b56      	ldr	r3, [pc, #344]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	4a55      	ldr	r2, [pc, #340]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 8005620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005624:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 809b 	beq.w	8005766 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005630:	4b50      	ldr	r3, [pc, #320]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 030c 	and.w	r3, r3, #12
 8005638:	2b08      	cmp	r3, #8
 800563a:	d05c      	beq.n	80056f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d141      	bne.n	80056c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005644:	4b4c      	ldr	r3, [pc, #304]	; (8005778 <HAL_RCC_OscConfig+0x4ec>)
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564a:	f7fc f97b 	bl	8001944 <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005652:	f7fc f977 	bl	8001944 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e081      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005664:	4b43      	ldr	r3, [pc, #268]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1f0      	bne.n	8005652 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	019b      	lsls	r3, r3, #6
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005686:	085b      	lsrs	r3, r3, #1
 8005688:	3b01      	subs	r3, #1
 800568a:	041b      	lsls	r3, r3, #16
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005692:	061b      	lsls	r3, r3, #24
 8005694:	4937      	ldr	r1, [pc, #220]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 8005696:	4313      	orrs	r3, r2
 8005698:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800569a:	4b37      	ldr	r3, [pc, #220]	; (8005778 <HAL_RCC_OscConfig+0x4ec>)
 800569c:	2201      	movs	r2, #1
 800569e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a0:	f7fc f950 	bl	8001944 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a8:	f7fc f94c 	bl	8001944 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e056      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ba:	4b2e      	ldr	r3, [pc, #184]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCC_OscConfig+0x41c>
 80056c6:	e04e      	b.n	8005766 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c8:	4b2b      	ldr	r3, [pc, #172]	; (8005778 <HAL_RCC_OscConfig+0x4ec>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ce:	f7fc f939 	bl	8001944 <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d6:	f7fc f935 	bl	8001944 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e03f      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e8:	4b22      	ldr	r3, [pc, #136]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f0      	bne.n	80056d6 <HAL_RCC_OscConfig+0x44a>
 80056f4:	e037      	b.n	8005766 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e032      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005702:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <HAL_RCC_OscConfig+0x4e8>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d028      	beq.n	8005762 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d121      	bne.n	8005762 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005728:	429a      	cmp	r2, r3
 800572a:	d11a      	bne.n	8005762 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005732:	4013      	ands	r3, r2
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005738:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800573a:	4293      	cmp	r3, r2
 800573c:	d111      	bne.n	8005762 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005748:	085b      	lsrs	r3, r3, #1
 800574a:	3b01      	subs	r3, #1
 800574c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800574e:	429a      	cmp	r2, r3
 8005750:	d107      	bne.n	8005762 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800575e:	429a      	cmp	r2, r3
 8005760:	d001      	beq.n	8005766 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40007000 	.word	0x40007000
 8005774:	40023800 	.word	0x40023800
 8005778:	42470060 	.word	0x42470060

0800577c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0cc      	b.n	800592a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005790:	4b68      	ldr	r3, [pc, #416]	; (8005934 <HAL_RCC_ClockConfig+0x1b8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d90c      	bls.n	80057b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579e:	4b65      	ldr	r3, [pc, #404]	; (8005934 <HAL_RCC_ClockConfig+0x1b8>)
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a6:	4b63      	ldr	r3, [pc, #396]	; (8005934 <HAL_RCC_ClockConfig+0x1b8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d001      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0b8      	b.n	800592a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d020      	beq.n	8005806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d005      	beq.n	80057dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057d0:	4b59      	ldr	r3, [pc, #356]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	4a58      	ldr	r2, [pc, #352]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d005      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057e8:	4b53      	ldr	r3, [pc, #332]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	4a52      	ldr	r2, [pc, #328]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057f4:	4b50      	ldr	r3, [pc, #320]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	494d      	ldr	r1, [pc, #308]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	4313      	orrs	r3, r2
 8005804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d044      	beq.n	800589c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d107      	bne.n	800582a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800581a:	4b47      	ldr	r3, [pc, #284]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d119      	bne.n	800585a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e07f      	b.n	800592a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b02      	cmp	r3, #2
 8005830:	d003      	beq.n	800583a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005836:	2b03      	cmp	r3, #3
 8005838:	d107      	bne.n	800584a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800583a:	4b3f      	ldr	r3, [pc, #252]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e06f      	b.n	800592a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800584a:	4b3b      	ldr	r3, [pc, #236]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e067      	b.n	800592a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800585a:	4b37      	ldr	r3, [pc, #220]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f023 0203 	bic.w	r2, r3, #3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	4934      	ldr	r1, [pc, #208]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 8005868:	4313      	orrs	r3, r2
 800586a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800586c:	f7fc f86a 	bl	8001944 <HAL_GetTick>
 8005870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005872:	e00a      	b.n	800588a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005874:	f7fc f866 	bl	8001944 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e04f      	b.n	800592a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800588a:	4b2b      	ldr	r3, [pc, #172]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 020c 	and.w	r2, r3, #12
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	429a      	cmp	r2, r3
 800589a:	d1eb      	bne.n	8005874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800589c:	4b25      	ldr	r3, [pc, #148]	; (8005934 <HAL_RCC_ClockConfig+0x1b8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d20c      	bcs.n	80058c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058aa:	4b22      	ldr	r3, [pc, #136]	; (8005934 <HAL_RCC_ClockConfig+0x1b8>)
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b2:	4b20      	ldr	r3, [pc, #128]	; (8005934 <HAL_RCC_ClockConfig+0x1b8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d001      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e032      	b.n	800592a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058d0:	4b19      	ldr	r3, [pc, #100]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	4916      	ldr	r1, [pc, #88]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d009      	beq.n	8005902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058ee:	4b12      	ldr	r3, [pc, #72]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	490e      	ldr	r1, [pc, #56]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005902:	f000 f821 	bl	8005948 <HAL_RCC_GetSysClockFreq>
 8005906:	4602      	mov	r2, r0
 8005908:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	091b      	lsrs	r3, r3, #4
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	490a      	ldr	r1, [pc, #40]	; (800593c <HAL_RCC_ClockConfig+0x1c0>)
 8005914:	5ccb      	ldrb	r3, [r1, r3]
 8005916:	fa22 f303 	lsr.w	r3, r2, r3
 800591a:	4a09      	ldr	r2, [pc, #36]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 800591c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800591e:	4b09      	ldr	r3, [pc, #36]	; (8005944 <HAL_RCC_ClockConfig+0x1c8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f7fb fdae 	bl	8001484 <HAL_InitTick>

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40023c00 	.word	0x40023c00
 8005938:	40023800 	.word	0x40023800
 800593c:	08007a50 	.word	0x08007a50
 8005940:	20000004 	.word	0x20000004
 8005944:	20000008 	.word	0x20000008

08005948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005948:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	607b      	str	r3, [r7, #4]
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	2300      	movs	r3, #0
 800595a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005960:	4b67      	ldr	r3, [pc, #412]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 030c 	and.w	r3, r3, #12
 8005968:	2b08      	cmp	r3, #8
 800596a:	d00d      	beq.n	8005988 <HAL_RCC_GetSysClockFreq+0x40>
 800596c:	2b08      	cmp	r3, #8
 800596e:	f200 80bd 	bhi.w	8005aec <HAL_RCC_GetSysClockFreq+0x1a4>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <HAL_RCC_GetSysClockFreq+0x34>
 8005976:	2b04      	cmp	r3, #4
 8005978:	d003      	beq.n	8005982 <HAL_RCC_GetSysClockFreq+0x3a>
 800597a:	e0b7      	b.n	8005aec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800597c:	4b61      	ldr	r3, [pc, #388]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800597e:	60bb      	str	r3, [r7, #8]
       break;
 8005980:	e0b7      	b.n	8005af2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005982:	4b61      	ldr	r3, [pc, #388]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005984:	60bb      	str	r3, [r7, #8]
      break;
 8005986:	e0b4      	b.n	8005af2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005988:	4b5d      	ldr	r3, [pc, #372]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005990:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005992:	4b5b      	ldr	r3, [pc, #364]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d04d      	beq.n	8005a3a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800599e:	4b58      	ldr	r3, [pc, #352]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	099b      	lsrs	r3, r3, #6
 80059a4:	461a      	mov	r2, r3
 80059a6:	f04f 0300 	mov.w	r3, #0
 80059aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80059ae:	f04f 0100 	mov.w	r1, #0
 80059b2:	ea02 0800 	and.w	r8, r2, r0
 80059b6:	ea03 0901 	and.w	r9, r3, r1
 80059ba:	4640      	mov	r0, r8
 80059bc:	4649      	mov	r1, r9
 80059be:	f04f 0200 	mov.w	r2, #0
 80059c2:	f04f 0300 	mov.w	r3, #0
 80059c6:	014b      	lsls	r3, r1, #5
 80059c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80059cc:	0142      	lsls	r2, r0, #5
 80059ce:	4610      	mov	r0, r2
 80059d0:	4619      	mov	r1, r3
 80059d2:	ebb0 0008 	subs.w	r0, r0, r8
 80059d6:	eb61 0109 	sbc.w	r1, r1, r9
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	018b      	lsls	r3, r1, #6
 80059e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80059e8:	0182      	lsls	r2, r0, #6
 80059ea:	1a12      	subs	r2, r2, r0
 80059ec:	eb63 0301 	sbc.w	r3, r3, r1
 80059f0:	f04f 0000 	mov.w	r0, #0
 80059f4:	f04f 0100 	mov.w	r1, #0
 80059f8:	00d9      	lsls	r1, r3, #3
 80059fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059fe:	00d0      	lsls	r0, r2, #3
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	eb12 0208 	adds.w	r2, r2, r8
 8005a08:	eb43 0309 	adc.w	r3, r3, r9
 8005a0c:	f04f 0000 	mov.w	r0, #0
 8005a10:	f04f 0100 	mov.w	r1, #0
 8005a14:	0259      	lsls	r1, r3, #9
 8005a16:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005a1a:	0250      	lsls	r0, r2, #9
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4610      	mov	r0, r2
 8005a22:	4619      	mov	r1, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f04f 0300 	mov.w	r3, #0
 8005a2c:	f7fb f87e 	bl	8000b2c <__aeabi_uldivmod>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4613      	mov	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	e04a      	b.n	8005ad0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a3a:	4b31      	ldr	r3, [pc, #196]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	099b      	lsrs	r3, r3, #6
 8005a40:	461a      	mov	r2, r3
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a4a:	f04f 0100 	mov.w	r1, #0
 8005a4e:	ea02 0400 	and.w	r4, r2, r0
 8005a52:	ea03 0501 	and.w	r5, r3, r1
 8005a56:	4620      	mov	r0, r4
 8005a58:	4629      	mov	r1, r5
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	f04f 0300 	mov.w	r3, #0
 8005a62:	014b      	lsls	r3, r1, #5
 8005a64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a68:	0142      	lsls	r2, r0, #5
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	1b00      	subs	r0, r0, r4
 8005a70:	eb61 0105 	sbc.w	r1, r1, r5
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	018b      	lsls	r3, r1, #6
 8005a7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a82:	0182      	lsls	r2, r0, #6
 8005a84:	1a12      	subs	r2, r2, r0
 8005a86:	eb63 0301 	sbc.w	r3, r3, r1
 8005a8a:	f04f 0000 	mov.w	r0, #0
 8005a8e:	f04f 0100 	mov.w	r1, #0
 8005a92:	00d9      	lsls	r1, r3, #3
 8005a94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a98:	00d0      	lsls	r0, r2, #3
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	1912      	adds	r2, r2, r4
 8005aa0:	eb45 0303 	adc.w	r3, r5, r3
 8005aa4:	f04f 0000 	mov.w	r0, #0
 8005aa8:	f04f 0100 	mov.w	r1, #0
 8005aac:	0299      	lsls	r1, r3, #10
 8005aae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005ab2:	0290      	lsls	r0, r2, #10
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4619      	mov	r1, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	f7fb f832 	bl	8000b2c <__aeabi_uldivmod>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4613      	mov	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	0c1b      	lsrs	r3, r3, #16
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	3301      	adds	r3, #1
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae8:	60bb      	str	r3, [r7, #8]
      break;
 8005aea:	e002      	b.n	8005af2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005aec:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005aee:	60bb      	str	r3, [r7, #8]
      break;
 8005af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005af2:	68bb      	ldr	r3, [r7, #8]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005afe:	bf00      	nop
 8005b00:	40023800 	.word	0x40023800
 8005b04:	00f42400 	.word	0x00f42400
 8005b08:	007a1200 	.word	0x007a1200

08005b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b10:	4b03      	ldr	r3, [pc, #12]	; (8005b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b12:	681b      	ldr	r3, [r3, #0]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20000004 	.word	0x20000004

08005b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b28:	f7ff fff0 	bl	8005b0c <HAL_RCC_GetHCLKFreq>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	0a9b      	lsrs	r3, r3, #10
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	4903      	ldr	r1, [pc, #12]	; (8005b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b3a:	5ccb      	ldrb	r3, [r1, r3]
 8005b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40023800 	.word	0x40023800
 8005b48:	08007a60 	.word	0x08007a60

08005b4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	220f      	movs	r2, #15
 8005b5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b5c:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 0203 	and.w	r2, r3, #3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b68:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b74:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005b80:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	08db      	lsrs	r3, r3, #3
 8005b86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b8e:	4b07      	ldr	r3, [pc, #28]	; (8005bac <HAL_RCC_GetClockConfig+0x60>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 020f 	and.w	r2, r3, #15
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	601a      	str	r2, [r3, #0]
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	40023c00 	.word	0x40023c00

08005bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e041      	b.n	8005c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fb fd96 	bl	8001708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3304      	adds	r3, #4
 8005bec:	4619      	mov	r1, r3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	f000 fb44 	bl	800627c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d001      	beq.n	8005c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e04e      	b.n	8005d06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a23      	ldr	r2, [pc, #140]	; (8005d14 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d022      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c92:	d01d      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1f      	ldr	r2, [pc, #124]	; (8005d18 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d018      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1e      	ldr	r2, [pc, #120]	; (8005d1c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d013      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1c      	ldr	r2, [pc, #112]	; (8005d20 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00e      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1b      	ldr	r2, [pc, #108]	; (8005d24 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d009      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a19      	ldr	r2, [pc, #100]	; (8005d28 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d004      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a18      	ldr	r2, [pc, #96]	; (8005d2c <HAL_TIM_Base_Start_IT+0xdc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d111      	bne.n	8005cf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b06      	cmp	r3, #6
 8005ce0:	d010      	beq.n	8005d04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f042 0201 	orr.w	r2, r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf2:	e007      	b.n	8005d04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	40010000 	.word	0x40010000
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40000800 	.word	0x40000800
 8005d20:	40000c00 	.word	0x40000c00
 8005d24:	40010400 	.word	0x40010400
 8005d28:	40014000 	.word	0x40014000
 8005d2c:	40001800 	.word	0x40001800

08005d30 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e041      	b.n	8005dc6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d106      	bne.n	8005d5c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f839 	bl	8005dce <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	f000 fa84 	bl	800627c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b082      	sub	sp, #8
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d122      	bne.n	8005e3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d11b      	bne.n	8005e3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f06f 0202 	mvn.w	r2, #2
 8005e0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	f003 0303 	and.w	r3, r3, #3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fa0b 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8005e2a:	e005      	b.n	8005e38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f9fd 	bl	800622c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fa0e 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d122      	bne.n	8005e92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d11b      	bne.n	8005e92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f06f 0204 	mvn.w	r2, #4
 8005e62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f9e1 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8005e7e:	e005      	b.n	8005e8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f9d3 	bl	800622c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f9e4 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d122      	bne.n	8005ee6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d11b      	bne.n	8005ee6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f06f 0208 	mvn.w	r2, #8
 8005eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2204      	movs	r2, #4
 8005ebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f9b7 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8005ed2:	e005      	b.n	8005ee0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f9a9 	bl	800622c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f9ba 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f003 0310 	and.w	r3, r3, #16
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d122      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	2b10      	cmp	r3, #16
 8005f00:	d11b      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f06f 0210 	mvn.w	r2, #16
 8005f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2208      	movs	r2, #8
 8005f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f98d 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8005f26:	e005      	b.n	8005f34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f97f 	bl	800622c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f990 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d10e      	bne.n	8005f66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d107      	bne.n	8005f66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f06f 0201 	mvn.w	r2, #1
 8005f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7fb fa3f 	bl	80013e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f70:	2b80      	cmp	r3, #128	; 0x80
 8005f72:	d10e      	bne.n	8005f92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7e:	2b80      	cmp	r3, #128	; 0x80
 8005f80:	d107      	bne.n	8005f92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fce5 	bl	800695c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9c:	2b40      	cmp	r3, #64	; 0x40
 8005f9e:	d10e      	bne.n	8005fbe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005faa:	2b40      	cmp	r3, #64	; 0x40
 8005fac:	d107      	bne.n	8005fbe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f955 	bl	8006268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d10e      	bne.n	8005fea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	d107      	bne.n	8005fea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f06f 0220 	mvn.w	r2, #32
 8005fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fcaf 	bl	8006948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fea:	bf00      	nop
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_TIM_OC_ConfigChannel+0x1a>
 800600a:	2302      	movs	r3, #2
 800600c:	e046      	b.n	800609c <HAL_TIM_OC_ConfigChannel+0xa8>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b0c      	cmp	r3, #12
 800601a:	d839      	bhi.n	8006090 <HAL_TIM_OC_ConfigChannel+0x9c>
 800601c:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <HAL_TIM_OC_ConfigChannel+0x30>)
 800601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006022:	bf00      	nop
 8006024:	08006059 	.word	0x08006059
 8006028:	08006091 	.word	0x08006091
 800602c:	08006091 	.word	0x08006091
 8006030:	08006091 	.word	0x08006091
 8006034:	08006067 	.word	0x08006067
 8006038:	08006091 	.word	0x08006091
 800603c:	08006091 	.word	0x08006091
 8006040:	08006091 	.word	0x08006091
 8006044:	08006075 	.word	0x08006075
 8006048:	08006091 	.word	0x08006091
 800604c:	08006091 	.word	0x08006091
 8006050:	08006091 	.word	0x08006091
 8006054:	08006083 	.word	0x08006083
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68b9      	ldr	r1, [r7, #8]
 800605e:	4618      	mov	r0, r3
 8006060:	f000 f9ac 	bl	80063bc <TIM_OC1_SetConfig>
      break;
 8006064:	e015      	b.n	8006092 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68b9      	ldr	r1, [r7, #8]
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fa15 	bl	800649c <TIM_OC2_SetConfig>
      break;
 8006072:	e00e      	b.n	8006092 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68b9      	ldr	r1, [r7, #8]
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fa84 	bl	8006588 <TIM_OC3_SetConfig>
      break;
 8006080:	e007      	b.n	8006092 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	4618      	mov	r0, r3
 800608a:	f000 faf1 	bl	8006670 <TIM_OC4_SetConfig>
      break;
 800608e:	e000      	b.n	8006092 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8006090:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_TIM_ConfigClockSource+0x18>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e0b3      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x180>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f4:	d03e      	beq.n	8006174 <HAL_TIM_ConfigClockSource+0xd0>
 80060f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060fa:	f200 8087 	bhi.w	800620c <HAL_TIM_ConfigClockSource+0x168>
 80060fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006102:	f000 8085 	beq.w	8006210 <HAL_TIM_ConfigClockSource+0x16c>
 8006106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610a:	d87f      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x168>
 800610c:	2b70      	cmp	r3, #112	; 0x70
 800610e:	d01a      	beq.n	8006146 <HAL_TIM_ConfigClockSource+0xa2>
 8006110:	2b70      	cmp	r3, #112	; 0x70
 8006112:	d87b      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x168>
 8006114:	2b60      	cmp	r3, #96	; 0x60
 8006116:	d050      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0x116>
 8006118:	2b60      	cmp	r3, #96	; 0x60
 800611a:	d877      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x168>
 800611c:	2b50      	cmp	r3, #80	; 0x50
 800611e:	d03c      	beq.n	800619a <HAL_TIM_ConfigClockSource+0xf6>
 8006120:	2b50      	cmp	r3, #80	; 0x50
 8006122:	d873      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x168>
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	d058      	beq.n	80061da <HAL_TIM_ConfigClockSource+0x136>
 8006128:	2b40      	cmp	r3, #64	; 0x40
 800612a:	d86f      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x168>
 800612c:	2b30      	cmp	r3, #48	; 0x30
 800612e:	d064      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x156>
 8006130:	2b30      	cmp	r3, #48	; 0x30
 8006132:	d86b      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x168>
 8006134:	2b20      	cmp	r3, #32
 8006136:	d060      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x156>
 8006138:	2b20      	cmp	r3, #32
 800613a:	d867      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x168>
 800613c:	2b00      	cmp	r3, #0
 800613e:	d05c      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x156>
 8006140:	2b10      	cmp	r3, #16
 8006142:	d05a      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006144:	e062      	b.n	800620c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	6899      	ldr	r1, [r3, #8]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f000 fb5b 	bl	8006810 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006168:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	609a      	str	r2, [r3, #8]
      break;
 8006172:	e04e      	b.n	8006212 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	6899      	ldr	r1, [r3, #8]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f000 fb44 	bl	8006810 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006196:	609a      	str	r2, [r3, #8]
      break;
 8006198:	e03b      	b.n	8006212 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6818      	ldr	r0, [r3, #0]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	6859      	ldr	r1, [r3, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	461a      	mov	r2, r3
 80061a8:	f000 fab8 	bl	800671c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2150      	movs	r1, #80	; 0x50
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 fb11 	bl	80067da <TIM_ITRx_SetConfig>
      break;
 80061b8:	e02b      	b.n	8006212 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	6859      	ldr	r1, [r3, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	461a      	mov	r2, r3
 80061c8:	f000 fad7 	bl	800677a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2160      	movs	r1, #96	; 0x60
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fb01 	bl	80067da <TIM_ITRx_SetConfig>
      break;
 80061d8:	e01b      	b.n	8006212 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6859      	ldr	r1, [r3, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f000 fa98 	bl	800671c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2140      	movs	r1, #64	; 0x40
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 faf1 	bl	80067da <TIM_ITRx_SetConfig>
      break;
 80061f8:	e00b      	b.n	8006212 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4619      	mov	r1, r3
 8006204:	4610      	mov	r0, r2
 8006206:	f000 fae8 	bl	80067da <TIM_ITRx_SetConfig>
        break;
 800620a:	e002      	b.n	8006212 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800620c:	bf00      	nop
 800620e:	e000      	b.n	8006212 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006210:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a40      	ldr	r2, [pc, #256]	; (8006390 <TIM_Base_SetConfig+0x114>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d013      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800629a:	d00f      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a3d      	ldr	r2, [pc, #244]	; (8006394 <TIM_Base_SetConfig+0x118>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00b      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a3c      	ldr	r2, [pc, #240]	; (8006398 <TIM_Base_SetConfig+0x11c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d007      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a3b      	ldr	r2, [pc, #236]	; (800639c <TIM_Base_SetConfig+0x120>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d003      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a3a      	ldr	r2, [pc, #232]	; (80063a0 <TIM_Base_SetConfig+0x124>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d108      	bne.n	80062ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2f      	ldr	r2, [pc, #188]	; (8006390 <TIM_Base_SetConfig+0x114>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d02b      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062dc:	d027      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2c      	ldr	r2, [pc, #176]	; (8006394 <TIM_Base_SetConfig+0x118>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d023      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2b      	ldr	r2, [pc, #172]	; (8006398 <TIM_Base_SetConfig+0x11c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01f      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2a      	ldr	r2, [pc, #168]	; (800639c <TIM_Base_SetConfig+0x120>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01b      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a29      	ldr	r2, [pc, #164]	; (80063a0 <TIM_Base_SetConfig+0x124>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d017      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a28      	ldr	r2, [pc, #160]	; (80063a4 <TIM_Base_SetConfig+0x128>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d013      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a27      	ldr	r2, [pc, #156]	; (80063a8 <TIM_Base_SetConfig+0x12c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00f      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a26      	ldr	r2, [pc, #152]	; (80063ac <TIM_Base_SetConfig+0x130>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00b      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a25      	ldr	r2, [pc, #148]	; (80063b0 <TIM_Base_SetConfig+0x134>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d007      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a24      	ldr	r2, [pc, #144]	; (80063b4 <TIM_Base_SetConfig+0x138>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d003      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a23      	ldr	r2, [pc, #140]	; (80063b8 <TIM_Base_SetConfig+0x13c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d108      	bne.n	8006340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a0a      	ldr	r2, [pc, #40]	; (8006390 <TIM_Base_SetConfig+0x114>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_Base_SetConfig+0xf8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a0c      	ldr	r2, [pc, #48]	; (80063a0 <TIM_Base_SetConfig+0x124>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d103      	bne.n	800637c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	615a      	str	r2, [r3, #20]
}
 8006382:	bf00      	nop
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40010000 	.word	0x40010000
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40000c00 	.word	0x40000c00
 80063a0:	40010400 	.word	0x40010400
 80063a4:	40014000 	.word	0x40014000
 80063a8:	40014400 	.word	0x40014400
 80063ac:	40014800 	.word	0x40014800
 80063b0:	40001800 	.word	0x40001800
 80063b4:	40001c00 	.word	0x40001c00
 80063b8:	40002000 	.word	0x40002000

080063bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	f023 0201 	bic.w	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f023 0302 	bic.w	r3, r3, #2
 8006404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a20      	ldr	r2, [pc, #128]	; (8006494 <TIM_OC1_SetConfig+0xd8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_OC1_SetConfig+0x64>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a1f      	ldr	r2, [pc, #124]	; (8006498 <TIM_OC1_SetConfig+0xdc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d10c      	bne.n	800643a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f023 0308 	bic.w	r3, r3, #8
 8006426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f023 0304 	bic.w	r3, r3, #4
 8006438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a15      	ldr	r2, [pc, #84]	; (8006494 <TIM_OC1_SetConfig+0xd8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d003      	beq.n	800644a <TIM_OC1_SetConfig+0x8e>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a14      	ldr	r2, [pc, #80]	; (8006498 <TIM_OC1_SetConfig+0xdc>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d111      	bne.n	800646e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	621a      	str	r2, [r3, #32]
}
 8006488:	bf00      	nop
 800648a:	371c      	adds	r7, #28
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	40010000 	.word	0x40010000
 8006498:	40010400 	.word	0x40010400

0800649c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f023 0210 	bic.w	r2, r3, #16
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	021b      	lsls	r3, r3, #8
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0320 	bic.w	r3, r3, #32
 80064e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a22      	ldr	r2, [pc, #136]	; (8006580 <TIM_OC2_SetConfig+0xe4>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_OC2_SetConfig+0x68>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a21      	ldr	r2, [pc, #132]	; (8006584 <TIM_OC2_SetConfig+0xe8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d10d      	bne.n	8006520 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800650a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800651e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a17      	ldr	r2, [pc, #92]	; (8006580 <TIM_OC2_SetConfig+0xe4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d003      	beq.n	8006530 <TIM_OC2_SetConfig+0x94>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a16      	ldr	r2, [pc, #88]	; (8006584 <TIM_OC2_SetConfig+0xe8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d113      	bne.n	8006558 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800653e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	4313      	orrs	r3, r2
 8006556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	621a      	str	r2, [r3, #32]
}
 8006572:	bf00      	nop
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40010000 	.word	0x40010000
 8006584:	40010400 	.word	0x40010400

08006588 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0303 	bic.w	r3, r3, #3
 80065be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	021b      	lsls	r3, r3, #8
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a21      	ldr	r2, [pc, #132]	; (8006668 <TIM_OC3_SetConfig+0xe0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d003      	beq.n	80065ee <TIM_OC3_SetConfig+0x66>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a20      	ldr	r2, [pc, #128]	; (800666c <TIM_OC3_SetConfig+0xe4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d10d      	bne.n	800660a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	4313      	orrs	r3, r2
 8006600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a16      	ldr	r2, [pc, #88]	; (8006668 <TIM_OC3_SetConfig+0xe0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d003      	beq.n	800661a <TIM_OC3_SetConfig+0x92>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a15      	ldr	r2, [pc, #84]	; (800666c <TIM_OC3_SetConfig+0xe4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d113      	bne.n	8006642 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	621a      	str	r2, [r3, #32]
}
 800665c:	bf00      	nop
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	40010000 	.word	0x40010000
 800666c:	40010400 	.word	0x40010400

08006670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800669e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	021b      	lsls	r3, r3, #8
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	031b      	lsls	r3, r3, #12
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a12      	ldr	r2, [pc, #72]	; (8006714 <TIM_OC4_SetConfig+0xa4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d003      	beq.n	80066d8 <TIM_OC4_SetConfig+0x68>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a11      	ldr	r2, [pc, #68]	; (8006718 <TIM_OC4_SetConfig+0xa8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d109      	bne.n	80066ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	019b      	lsls	r3, r3, #6
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	621a      	str	r2, [r3, #32]
}
 8006706:	bf00      	nop
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	40010000 	.word	0x40010000
 8006718:	40010400 	.word	0x40010400

0800671c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f023 0201 	bic.w	r2, r3, #1
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f023 030a 	bic.w	r3, r3, #10
 8006758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800677a:	b480      	push	{r7}
 800677c:	b087      	sub	sp, #28
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f023 0210 	bic.w	r2, r3, #16
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	031b      	lsls	r3, r3, #12
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	f043 0307 	orr.w	r3, r3, #7
 80067fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	609a      	str	r2, [r3, #8]
}
 8006804:	bf00      	nop
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800682a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	021a      	lsls	r2, r3, #8
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	431a      	orrs	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4313      	orrs	r3, r2
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	4313      	orrs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	609a      	str	r2, [r3, #8]
}
 8006844:	bf00      	nop
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006864:	2302      	movs	r3, #2
 8006866:	e05a      	b.n	800691e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a21      	ldr	r2, [pc, #132]	; (800692c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d022      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b4:	d01d      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a1d      	ldr	r2, [pc, #116]	; (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d018      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a1b      	ldr	r2, [pc, #108]	; (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d013      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a1a      	ldr	r2, [pc, #104]	; (8006938 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00e      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a18      	ldr	r2, [pc, #96]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d009      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a17      	ldr	r2, [pc, #92]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d004      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a15      	ldr	r2, [pc, #84]	; (8006944 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d10c      	bne.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	4313      	orrs	r3, r2
 8006902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40010000 	.word	0x40010000
 8006930:	40000400 	.word	0x40000400
 8006934:	40000800 	.word	0x40000800
 8006938:	40000c00 	.word	0x40000c00
 800693c:	40010400 	.word	0x40010400
 8006940:	40014000 	.word	0x40014000
 8006944:	40001800 	.word	0x40001800

08006948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <__libc_init_array>:
 8006970:	b570      	push	{r4, r5, r6, lr}
 8006972:	4d0d      	ldr	r5, [pc, #52]	; (80069a8 <__libc_init_array+0x38>)
 8006974:	4c0d      	ldr	r4, [pc, #52]	; (80069ac <__libc_init_array+0x3c>)
 8006976:	1b64      	subs	r4, r4, r5
 8006978:	10a4      	asrs	r4, r4, #2
 800697a:	2600      	movs	r6, #0
 800697c:	42a6      	cmp	r6, r4
 800697e:	d109      	bne.n	8006994 <__libc_init_array+0x24>
 8006980:	4d0b      	ldr	r5, [pc, #44]	; (80069b0 <__libc_init_array+0x40>)
 8006982:	4c0c      	ldr	r4, [pc, #48]	; (80069b4 <__libc_init_array+0x44>)
 8006984:	f001 f856 	bl	8007a34 <_init>
 8006988:	1b64      	subs	r4, r4, r5
 800698a:	10a4      	asrs	r4, r4, #2
 800698c:	2600      	movs	r6, #0
 800698e:	42a6      	cmp	r6, r4
 8006990:	d105      	bne.n	800699e <__libc_init_array+0x2e>
 8006992:	bd70      	pop	{r4, r5, r6, pc}
 8006994:	f855 3b04 	ldr.w	r3, [r5], #4
 8006998:	4798      	blx	r3
 800699a:	3601      	adds	r6, #1
 800699c:	e7ee      	b.n	800697c <__libc_init_array+0xc>
 800699e:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a2:	4798      	blx	r3
 80069a4:	3601      	adds	r6, #1
 80069a6:	e7f2      	b.n	800698e <__libc_init_array+0x1e>
 80069a8:	08007c50 	.word	0x08007c50
 80069ac:	08007c50 	.word	0x08007c50
 80069b0:	08007c50 	.word	0x08007c50
 80069b4:	08007c54 	.word	0x08007c54

080069b8 <memset>:
 80069b8:	4402      	add	r2, r0
 80069ba:	4603      	mov	r3, r0
 80069bc:	4293      	cmp	r3, r2
 80069be:	d100      	bne.n	80069c2 <memset+0xa>
 80069c0:	4770      	bx	lr
 80069c2:	f803 1b01 	strb.w	r1, [r3], #1
 80069c6:	e7f9      	b.n	80069bc <memset+0x4>

080069c8 <sin>:
 80069c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069ca:	ec53 2b10 	vmov	r2, r3, d0
 80069ce:	4826      	ldr	r0, [pc, #152]	; (8006a68 <sin+0xa0>)
 80069d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80069d4:	4281      	cmp	r1, r0
 80069d6:	dc07      	bgt.n	80069e8 <sin+0x20>
 80069d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006a60 <sin+0x98>
 80069dc:	2000      	movs	r0, #0
 80069de:	f000 fe5b 	bl	8007698 <__kernel_sin>
 80069e2:	ec51 0b10 	vmov	r0, r1, d0
 80069e6:	e007      	b.n	80069f8 <sin+0x30>
 80069e8:	4820      	ldr	r0, [pc, #128]	; (8006a6c <sin+0xa4>)
 80069ea:	4281      	cmp	r1, r0
 80069ec:	dd09      	ble.n	8006a02 <sin+0x3a>
 80069ee:	ee10 0a10 	vmov	r0, s0
 80069f2:	4619      	mov	r1, r3
 80069f4:	f7f9 fc00 	bl	80001f8 <__aeabi_dsub>
 80069f8:	ec41 0b10 	vmov	d0, r0, r1
 80069fc:	b005      	add	sp, #20
 80069fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a02:	4668      	mov	r0, sp
 8006a04:	f000 f834 	bl	8006a70 <__ieee754_rem_pio2>
 8006a08:	f000 0003 	and.w	r0, r0, #3
 8006a0c:	2801      	cmp	r0, #1
 8006a0e:	d008      	beq.n	8006a22 <sin+0x5a>
 8006a10:	2802      	cmp	r0, #2
 8006a12:	d00d      	beq.n	8006a30 <sin+0x68>
 8006a14:	b9d0      	cbnz	r0, 8006a4c <sin+0x84>
 8006a16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a1a:	ed9d 0b00 	vldr	d0, [sp]
 8006a1e:	2001      	movs	r0, #1
 8006a20:	e7dd      	b.n	80069de <sin+0x16>
 8006a22:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a26:	ed9d 0b00 	vldr	d0, [sp]
 8006a2a:	f000 fa2d 	bl	8006e88 <__kernel_cos>
 8006a2e:	e7d8      	b.n	80069e2 <sin+0x1a>
 8006a30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a34:	ed9d 0b00 	vldr	d0, [sp]
 8006a38:	2001      	movs	r0, #1
 8006a3a:	f000 fe2d 	bl	8007698 <__kernel_sin>
 8006a3e:	ec53 2b10 	vmov	r2, r3, d0
 8006a42:	ee10 0a10 	vmov	r0, s0
 8006a46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006a4a:	e7d5      	b.n	80069f8 <sin+0x30>
 8006a4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a50:	ed9d 0b00 	vldr	d0, [sp]
 8006a54:	f000 fa18 	bl	8006e88 <__kernel_cos>
 8006a58:	e7f1      	b.n	8006a3e <sin+0x76>
 8006a5a:	bf00      	nop
 8006a5c:	f3af 8000 	nop.w
	...
 8006a68:	3fe921fb 	.word	0x3fe921fb
 8006a6c:	7fefffff 	.word	0x7fefffff

08006a70 <__ieee754_rem_pio2>:
 8006a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a74:	ed2d 8b02 	vpush	{d8}
 8006a78:	ec55 4b10 	vmov	r4, r5, d0
 8006a7c:	4bca      	ldr	r3, [pc, #808]	; (8006da8 <__ieee754_rem_pio2+0x338>)
 8006a7e:	b08b      	sub	sp, #44	; 0x2c
 8006a80:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006a84:	4598      	cmp	r8, r3
 8006a86:	4682      	mov	sl, r0
 8006a88:	9502      	str	r5, [sp, #8]
 8006a8a:	dc08      	bgt.n	8006a9e <__ieee754_rem_pio2+0x2e>
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2300      	movs	r3, #0
 8006a90:	ed80 0b00 	vstr	d0, [r0]
 8006a94:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006a98:	f04f 0b00 	mov.w	fp, #0
 8006a9c:	e028      	b.n	8006af0 <__ieee754_rem_pio2+0x80>
 8006a9e:	4bc3      	ldr	r3, [pc, #780]	; (8006dac <__ieee754_rem_pio2+0x33c>)
 8006aa0:	4598      	cmp	r8, r3
 8006aa2:	dc78      	bgt.n	8006b96 <__ieee754_rem_pio2+0x126>
 8006aa4:	9b02      	ldr	r3, [sp, #8]
 8006aa6:	4ec2      	ldr	r6, [pc, #776]	; (8006db0 <__ieee754_rem_pio2+0x340>)
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	ee10 0a10 	vmov	r0, s0
 8006aae:	a3b0      	add	r3, pc, #704	; (adr r3, 8006d70 <__ieee754_rem_pio2+0x300>)
 8006ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	dd39      	ble.n	8006b2c <__ieee754_rem_pio2+0xbc>
 8006ab8:	f7f9 fb9e 	bl	80001f8 <__aeabi_dsub>
 8006abc:	45b0      	cmp	r8, r6
 8006abe:	4604      	mov	r4, r0
 8006ac0:	460d      	mov	r5, r1
 8006ac2:	d01b      	beq.n	8006afc <__ieee754_rem_pio2+0x8c>
 8006ac4:	a3ac      	add	r3, pc, #688	; (adr r3, 8006d78 <__ieee754_rem_pio2+0x308>)
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	f7f9 fb95 	bl	80001f8 <__aeabi_dsub>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	e9ca 2300 	strd	r2, r3, [sl]
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	4629      	mov	r1, r5
 8006ada:	f7f9 fb8d 	bl	80001f8 <__aeabi_dsub>
 8006ade:	a3a6      	add	r3, pc, #664	; (adr r3, 8006d78 <__ieee754_rem_pio2+0x308>)
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f7f9 fb88 	bl	80001f8 <__aeabi_dsub>
 8006ae8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006aec:	f04f 0b01 	mov.w	fp, #1
 8006af0:	4658      	mov	r0, fp
 8006af2:	b00b      	add	sp, #44	; 0x2c
 8006af4:	ecbd 8b02 	vpop	{d8}
 8006af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afc:	a3a0      	add	r3, pc, #640	; (adr r3, 8006d80 <__ieee754_rem_pio2+0x310>)
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f7f9 fb79 	bl	80001f8 <__aeabi_dsub>
 8006b06:	a3a0      	add	r3, pc, #640	; (adr r3, 8006d88 <__ieee754_rem_pio2+0x318>)
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	460d      	mov	r5, r1
 8006b10:	f7f9 fb72 	bl	80001f8 <__aeabi_dsub>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	e9ca 2300 	strd	r2, r3, [sl]
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	4629      	mov	r1, r5
 8006b20:	f7f9 fb6a 	bl	80001f8 <__aeabi_dsub>
 8006b24:	a398      	add	r3, pc, #608	; (adr r3, 8006d88 <__ieee754_rem_pio2+0x318>)
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	e7db      	b.n	8006ae4 <__ieee754_rem_pio2+0x74>
 8006b2c:	f7f9 fb66 	bl	80001fc <__adddf3>
 8006b30:	45b0      	cmp	r8, r6
 8006b32:	4604      	mov	r4, r0
 8006b34:	460d      	mov	r5, r1
 8006b36:	d016      	beq.n	8006b66 <__ieee754_rem_pio2+0xf6>
 8006b38:	a38f      	add	r3, pc, #572	; (adr r3, 8006d78 <__ieee754_rem_pio2+0x308>)
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	f7f9 fb5d 	bl	80001fc <__adddf3>
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	e9ca 2300 	strd	r2, r3, [sl]
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	f7f9 fb53 	bl	80001f8 <__aeabi_dsub>
 8006b52:	a389      	add	r3, pc, #548	; (adr r3, 8006d78 <__ieee754_rem_pio2+0x308>)
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f7f9 fb50 	bl	80001fc <__adddf3>
 8006b5c:	f04f 3bff 	mov.w	fp, #4294967295
 8006b60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006b64:	e7c4      	b.n	8006af0 <__ieee754_rem_pio2+0x80>
 8006b66:	a386      	add	r3, pc, #536	; (adr r3, 8006d80 <__ieee754_rem_pio2+0x310>)
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f7f9 fb46 	bl	80001fc <__adddf3>
 8006b70:	a385      	add	r3, pc, #532	; (adr r3, 8006d88 <__ieee754_rem_pio2+0x318>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	4604      	mov	r4, r0
 8006b78:	460d      	mov	r5, r1
 8006b7a:	f7f9 fb3f 	bl	80001fc <__adddf3>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	e9ca 2300 	strd	r2, r3, [sl]
 8006b86:	4620      	mov	r0, r4
 8006b88:	4629      	mov	r1, r5
 8006b8a:	f7f9 fb35 	bl	80001f8 <__aeabi_dsub>
 8006b8e:	a37e      	add	r3, pc, #504	; (adr r3, 8006d88 <__ieee754_rem_pio2+0x318>)
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	e7e0      	b.n	8006b58 <__ieee754_rem_pio2+0xe8>
 8006b96:	4b87      	ldr	r3, [pc, #540]	; (8006db4 <__ieee754_rem_pio2+0x344>)
 8006b98:	4598      	cmp	r8, r3
 8006b9a:	f300 80d9 	bgt.w	8006d50 <__ieee754_rem_pio2+0x2e0>
 8006b9e:	f000 fe39 	bl	8007814 <fabs>
 8006ba2:	ec55 4b10 	vmov	r4, r5, d0
 8006ba6:	ee10 0a10 	vmov	r0, s0
 8006baa:	a379      	add	r3, pc, #484	; (adr r3, 8006d90 <__ieee754_rem_pio2+0x320>)
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	f7f9 fcd9 	bl	8000568 <__aeabi_dmul>
 8006bb6:	4b80      	ldr	r3, [pc, #512]	; (8006db8 <__ieee754_rem_pio2+0x348>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f7f9 fb1f 	bl	80001fc <__adddf3>
 8006bbe:	f7f9 ff6d 	bl	8000a9c <__aeabi_d2iz>
 8006bc2:	4683      	mov	fp, r0
 8006bc4:	f7f9 fc66 	bl	8000494 <__aeabi_i2d>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	ec43 2b18 	vmov	d8, r2, r3
 8006bd0:	a367      	add	r3, pc, #412	; (adr r3, 8006d70 <__ieee754_rem_pio2+0x300>)
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f7f9 fcc7 	bl	8000568 <__aeabi_dmul>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4620      	mov	r0, r4
 8006be0:	4629      	mov	r1, r5
 8006be2:	f7f9 fb09 	bl	80001f8 <__aeabi_dsub>
 8006be6:	a364      	add	r3, pc, #400	; (adr r3, 8006d78 <__ieee754_rem_pio2+0x308>)
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	4606      	mov	r6, r0
 8006bee:	460f      	mov	r7, r1
 8006bf0:	ec51 0b18 	vmov	r0, r1, d8
 8006bf4:	f7f9 fcb8 	bl	8000568 <__aeabi_dmul>
 8006bf8:	f1bb 0f1f 	cmp.w	fp, #31
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	460d      	mov	r5, r1
 8006c00:	dc0d      	bgt.n	8006c1e <__ieee754_rem_pio2+0x1ae>
 8006c02:	4b6e      	ldr	r3, [pc, #440]	; (8006dbc <__ieee754_rem_pio2+0x34c>)
 8006c04:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0c:	4543      	cmp	r3, r8
 8006c0e:	d006      	beq.n	8006c1e <__ieee754_rem_pio2+0x1ae>
 8006c10:	4622      	mov	r2, r4
 8006c12:	462b      	mov	r3, r5
 8006c14:	4630      	mov	r0, r6
 8006c16:	4639      	mov	r1, r7
 8006c18:	f7f9 faee 	bl	80001f8 <__aeabi_dsub>
 8006c1c:	e00f      	b.n	8006c3e <__ieee754_rem_pio2+0x1ce>
 8006c1e:	462b      	mov	r3, r5
 8006c20:	4622      	mov	r2, r4
 8006c22:	4630      	mov	r0, r6
 8006c24:	4639      	mov	r1, r7
 8006c26:	f7f9 fae7 	bl	80001f8 <__aeabi_dsub>
 8006c2a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006c2e:	9303      	str	r3, [sp, #12]
 8006c30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c34:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006c38:	f1b8 0f10 	cmp.w	r8, #16
 8006c3c:	dc02      	bgt.n	8006c44 <__ieee754_rem_pio2+0x1d4>
 8006c3e:	e9ca 0100 	strd	r0, r1, [sl]
 8006c42:	e039      	b.n	8006cb8 <__ieee754_rem_pio2+0x248>
 8006c44:	a34e      	add	r3, pc, #312	; (adr r3, 8006d80 <__ieee754_rem_pio2+0x310>)
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	ec51 0b18 	vmov	r0, r1, d8
 8006c4e:	f7f9 fc8b 	bl	8000568 <__aeabi_dmul>
 8006c52:	4604      	mov	r4, r0
 8006c54:	460d      	mov	r5, r1
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	4639      	mov	r1, r7
 8006c5e:	f7f9 facb 	bl	80001f8 <__aeabi_dsub>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4680      	mov	r8, r0
 8006c68:	4689      	mov	r9, r1
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	4639      	mov	r1, r7
 8006c6e:	f7f9 fac3 	bl	80001f8 <__aeabi_dsub>
 8006c72:	4622      	mov	r2, r4
 8006c74:	462b      	mov	r3, r5
 8006c76:	f7f9 fabf 	bl	80001f8 <__aeabi_dsub>
 8006c7a:	a343      	add	r3, pc, #268	; (adr r3, 8006d88 <__ieee754_rem_pio2+0x318>)
 8006c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c80:	4604      	mov	r4, r0
 8006c82:	460d      	mov	r5, r1
 8006c84:	ec51 0b18 	vmov	r0, r1, d8
 8006c88:	f7f9 fc6e 	bl	8000568 <__aeabi_dmul>
 8006c8c:	4622      	mov	r2, r4
 8006c8e:	462b      	mov	r3, r5
 8006c90:	f7f9 fab2 	bl	80001f8 <__aeabi_dsub>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4604      	mov	r4, r0
 8006c9a:	460d      	mov	r5, r1
 8006c9c:	4640      	mov	r0, r8
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	f7f9 faaa 	bl	80001f8 <__aeabi_dsub>
 8006ca4:	9a03      	ldr	r2, [sp, #12]
 8006ca6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b31      	cmp	r3, #49	; 0x31
 8006cae:	dc24      	bgt.n	8006cfa <__ieee754_rem_pio2+0x28a>
 8006cb0:	e9ca 0100 	strd	r0, r1, [sl]
 8006cb4:	4646      	mov	r6, r8
 8006cb6:	464f      	mov	r7, r9
 8006cb8:	e9da 8900 	ldrd	r8, r9, [sl]
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	4642      	mov	r2, r8
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	f7f9 fa98 	bl	80001f8 <__aeabi_dsub>
 8006cc8:	462b      	mov	r3, r5
 8006cca:	4622      	mov	r2, r4
 8006ccc:	f7f9 fa94 	bl	80001f8 <__aeabi_dsub>
 8006cd0:	9b02      	ldr	r3, [sp, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006cd8:	f6bf af0a 	bge.w	8006af0 <__ieee754_rem_pio2+0x80>
 8006cdc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006ce0:	f8ca 3004 	str.w	r3, [sl, #4]
 8006ce4:	f8ca 8000 	str.w	r8, [sl]
 8006ce8:	f8ca 0008 	str.w	r0, [sl, #8]
 8006cec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cf0:	f8ca 300c 	str.w	r3, [sl, #12]
 8006cf4:	f1cb 0b00 	rsb	fp, fp, #0
 8006cf8:	e6fa      	b.n	8006af0 <__ieee754_rem_pio2+0x80>
 8006cfa:	a327      	add	r3, pc, #156	; (adr r3, 8006d98 <__ieee754_rem_pio2+0x328>)
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	ec51 0b18 	vmov	r0, r1, d8
 8006d04:	f7f9 fc30 	bl	8000568 <__aeabi_dmul>
 8006d08:	4604      	mov	r4, r0
 8006d0a:	460d      	mov	r5, r1
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4640      	mov	r0, r8
 8006d12:	4649      	mov	r1, r9
 8006d14:	f7f9 fa70 	bl	80001f8 <__aeabi_dsub>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	460f      	mov	r7, r1
 8006d20:	4640      	mov	r0, r8
 8006d22:	4649      	mov	r1, r9
 8006d24:	f7f9 fa68 	bl	80001f8 <__aeabi_dsub>
 8006d28:	4622      	mov	r2, r4
 8006d2a:	462b      	mov	r3, r5
 8006d2c:	f7f9 fa64 	bl	80001f8 <__aeabi_dsub>
 8006d30:	a31b      	add	r3, pc, #108	; (adr r3, 8006da0 <__ieee754_rem_pio2+0x330>)
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	4604      	mov	r4, r0
 8006d38:	460d      	mov	r5, r1
 8006d3a:	ec51 0b18 	vmov	r0, r1, d8
 8006d3e:	f7f9 fc13 	bl	8000568 <__aeabi_dmul>
 8006d42:	4622      	mov	r2, r4
 8006d44:	462b      	mov	r3, r5
 8006d46:	f7f9 fa57 	bl	80001f8 <__aeabi_dsub>
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	460d      	mov	r5, r1
 8006d4e:	e75f      	b.n	8006c10 <__ieee754_rem_pio2+0x1a0>
 8006d50:	4b1b      	ldr	r3, [pc, #108]	; (8006dc0 <__ieee754_rem_pio2+0x350>)
 8006d52:	4598      	cmp	r8, r3
 8006d54:	dd36      	ble.n	8006dc4 <__ieee754_rem_pio2+0x354>
 8006d56:	ee10 2a10 	vmov	r2, s0
 8006d5a:	462b      	mov	r3, r5
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	4629      	mov	r1, r5
 8006d60:	f7f9 fa4a 	bl	80001f8 <__aeabi_dsub>
 8006d64:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d68:	e9ca 0100 	strd	r0, r1, [sl]
 8006d6c:	e694      	b.n	8006a98 <__ieee754_rem_pio2+0x28>
 8006d6e:	bf00      	nop
 8006d70:	54400000 	.word	0x54400000
 8006d74:	3ff921fb 	.word	0x3ff921fb
 8006d78:	1a626331 	.word	0x1a626331
 8006d7c:	3dd0b461 	.word	0x3dd0b461
 8006d80:	1a600000 	.word	0x1a600000
 8006d84:	3dd0b461 	.word	0x3dd0b461
 8006d88:	2e037073 	.word	0x2e037073
 8006d8c:	3ba3198a 	.word	0x3ba3198a
 8006d90:	6dc9c883 	.word	0x6dc9c883
 8006d94:	3fe45f30 	.word	0x3fe45f30
 8006d98:	2e000000 	.word	0x2e000000
 8006d9c:	3ba3198a 	.word	0x3ba3198a
 8006da0:	252049c1 	.word	0x252049c1
 8006da4:	397b839a 	.word	0x397b839a
 8006da8:	3fe921fb 	.word	0x3fe921fb
 8006dac:	4002d97b 	.word	0x4002d97b
 8006db0:	3ff921fb 	.word	0x3ff921fb
 8006db4:	413921fb 	.word	0x413921fb
 8006db8:	3fe00000 	.word	0x3fe00000
 8006dbc:	08007a70 	.word	0x08007a70
 8006dc0:	7fefffff 	.word	0x7fefffff
 8006dc4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006dc8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006dcc:	ee10 0a10 	vmov	r0, s0
 8006dd0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006dd4:	ee10 6a10 	vmov	r6, s0
 8006dd8:	460f      	mov	r7, r1
 8006dda:	f7f9 fe5f 	bl	8000a9c <__aeabi_d2iz>
 8006dde:	f7f9 fb59 	bl	8000494 <__aeabi_i2d>
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	4630      	mov	r0, r6
 8006de8:	4639      	mov	r1, r7
 8006dea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dee:	f7f9 fa03 	bl	80001f8 <__aeabi_dsub>
 8006df2:	4b22      	ldr	r3, [pc, #136]	; (8006e7c <__ieee754_rem_pio2+0x40c>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	f7f9 fbb7 	bl	8000568 <__aeabi_dmul>
 8006dfa:	460f      	mov	r7, r1
 8006dfc:	4606      	mov	r6, r0
 8006dfe:	f7f9 fe4d 	bl	8000a9c <__aeabi_d2iz>
 8006e02:	f7f9 fb47 	bl	8000494 <__aeabi_i2d>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	4639      	mov	r1, r7
 8006e0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e12:	f7f9 f9f1 	bl	80001f8 <__aeabi_dsub>
 8006e16:	4b19      	ldr	r3, [pc, #100]	; (8006e7c <__ieee754_rem_pio2+0x40c>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f7f9 fba5 	bl	8000568 <__aeabi_dmul>
 8006e1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006e22:	ad04      	add	r5, sp, #16
 8006e24:	f04f 0803 	mov.w	r8, #3
 8006e28:	46a9      	mov	r9, r5
 8006e2a:	2600      	movs	r6, #0
 8006e2c:	2700      	movs	r7, #0
 8006e2e:	4632      	mov	r2, r6
 8006e30:	463b      	mov	r3, r7
 8006e32:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006e36:	46c3      	mov	fp, r8
 8006e38:	3d08      	subs	r5, #8
 8006e3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e3e:	f7f9 fdfb 	bl	8000a38 <__aeabi_dcmpeq>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d1f3      	bne.n	8006e2e <__ieee754_rem_pio2+0x3be>
 8006e46:	4b0e      	ldr	r3, [pc, #56]	; (8006e80 <__ieee754_rem_pio2+0x410>)
 8006e48:	9301      	str	r3, [sp, #4]
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	4622      	mov	r2, r4
 8006e50:	465b      	mov	r3, fp
 8006e52:	4651      	mov	r1, sl
 8006e54:	4648      	mov	r0, r9
 8006e56:	f000 f8df 	bl	8007018 <__kernel_rem_pio2>
 8006e5a:	9b02      	ldr	r3, [sp, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	4683      	mov	fp, r0
 8006e60:	f6bf ae46 	bge.w	8006af0 <__ieee754_rem_pio2+0x80>
 8006e64:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006e68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006e6c:	f8ca 3004 	str.w	r3, [sl, #4]
 8006e70:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006e74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006e78:	e73a      	b.n	8006cf0 <__ieee754_rem_pio2+0x280>
 8006e7a:	bf00      	nop
 8006e7c:	41700000 	.word	0x41700000
 8006e80:	08007af0 	.word	0x08007af0
 8006e84:	00000000 	.word	0x00000000

08006e88 <__kernel_cos>:
 8006e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8c:	ec57 6b10 	vmov	r6, r7, d0
 8006e90:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006e94:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006e98:	ed8d 1b00 	vstr	d1, [sp]
 8006e9c:	da07      	bge.n	8006eae <__kernel_cos+0x26>
 8006e9e:	ee10 0a10 	vmov	r0, s0
 8006ea2:	4639      	mov	r1, r7
 8006ea4:	f7f9 fdfa 	bl	8000a9c <__aeabi_d2iz>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	f000 8088 	beq.w	8006fbe <__kernel_cos+0x136>
 8006eae:	4632      	mov	r2, r6
 8006eb0:	463b      	mov	r3, r7
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	f7f9 fb57 	bl	8000568 <__aeabi_dmul>
 8006eba:	4b51      	ldr	r3, [pc, #324]	; (8007000 <__kernel_cos+0x178>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	460d      	mov	r5, r1
 8006ec2:	f7f9 fb51 	bl	8000568 <__aeabi_dmul>
 8006ec6:	a340      	add	r3, pc, #256	; (adr r3, 8006fc8 <__kernel_cos+0x140>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	4682      	mov	sl, r0
 8006ece:	468b      	mov	fp, r1
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	f7f9 fb48 	bl	8000568 <__aeabi_dmul>
 8006ed8:	a33d      	add	r3, pc, #244	; (adr r3, 8006fd0 <__kernel_cos+0x148>)
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	f7f9 f98d 	bl	80001fc <__adddf3>
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	462b      	mov	r3, r5
 8006ee6:	f7f9 fb3f 	bl	8000568 <__aeabi_dmul>
 8006eea:	a33b      	add	r3, pc, #236	; (adr r3, 8006fd8 <__kernel_cos+0x150>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f7f9 f982 	bl	80001f8 <__aeabi_dsub>
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	462b      	mov	r3, r5
 8006ef8:	f7f9 fb36 	bl	8000568 <__aeabi_dmul>
 8006efc:	a338      	add	r3, pc, #224	; (adr r3, 8006fe0 <__kernel_cos+0x158>)
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	f7f9 f97b 	bl	80001fc <__adddf3>
 8006f06:	4622      	mov	r2, r4
 8006f08:	462b      	mov	r3, r5
 8006f0a:	f7f9 fb2d 	bl	8000568 <__aeabi_dmul>
 8006f0e:	a336      	add	r3, pc, #216	; (adr r3, 8006fe8 <__kernel_cos+0x160>)
 8006f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f14:	f7f9 f970 	bl	80001f8 <__aeabi_dsub>
 8006f18:	4622      	mov	r2, r4
 8006f1a:	462b      	mov	r3, r5
 8006f1c:	f7f9 fb24 	bl	8000568 <__aeabi_dmul>
 8006f20:	a333      	add	r3, pc, #204	; (adr r3, 8006ff0 <__kernel_cos+0x168>)
 8006f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f26:	f7f9 f969 	bl	80001fc <__adddf3>
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	462b      	mov	r3, r5
 8006f2e:	f7f9 fb1b 	bl	8000568 <__aeabi_dmul>
 8006f32:	4622      	mov	r2, r4
 8006f34:	462b      	mov	r3, r5
 8006f36:	f7f9 fb17 	bl	8000568 <__aeabi_dmul>
 8006f3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f3e:	4604      	mov	r4, r0
 8006f40:	460d      	mov	r5, r1
 8006f42:	4630      	mov	r0, r6
 8006f44:	4639      	mov	r1, r7
 8006f46:	f7f9 fb0f 	bl	8000568 <__aeabi_dmul>
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	4629      	mov	r1, r5
 8006f50:	4620      	mov	r0, r4
 8006f52:	f7f9 f951 	bl	80001f8 <__aeabi_dsub>
 8006f56:	4b2b      	ldr	r3, [pc, #172]	; (8007004 <__kernel_cos+0x17c>)
 8006f58:	4598      	cmp	r8, r3
 8006f5a:	4606      	mov	r6, r0
 8006f5c:	460f      	mov	r7, r1
 8006f5e:	dc10      	bgt.n	8006f82 <__kernel_cos+0xfa>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4650      	mov	r0, sl
 8006f66:	4659      	mov	r1, fp
 8006f68:	f7f9 f946 	bl	80001f8 <__aeabi_dsub>
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	4926      	ldr	r1, [pc, #152]	; (8007008 <__kernel_cos+0x180>)
 8006f70:	4602      	mov	r2, r0
 8006f72:	2000      	movs	r0, #0
 8006f74:	f7f9 f940 	bl	80001f8 <__aeabi_dsub>
 8006f78:	ec41 0b10 	vmov	d0, r0, r1
 8006f7c:	b003      	add	sp, #12
 8006f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f82:	4b22      	ldr	r3, [pc, #136]	; (800700c <__kernel_cos+0x184>)
 8006f84:	4920      	ldr	r1, [pc, #128]	; (8007008 <__kernel_cos+0x180>)
 8006f86:	4598      	cmp	r8, r3
 8006f88:	bfcc      	ite	gt
 8006f8a:	4d21      	ldrgt	r5, [pc, #132]	; (8007010 <__kernel_cos+0x188>)
 8006f8c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006f90:	2400      	movs	r4, #0
 8006f92:	4622      	mov	r2, r4
 8006f94:	462b      	mov	r3, r5
 8006f96:	2000      	movs	r0, #0
 8006f98:	f7f9 f92e 	bl	80001f8 <__aeabi_dsub>
 8006f9c:	4622      	mov	r2, r4
 8006f9e:	4680      	mov	r8, r0
 8006fa0:	4689      	mov	r9, r1
 8006fa2:	462b      	mov	r3, r5
 8006fa4:	4650      	mov	r0, sl
 8006fa6:	4659      	mov	r1, fp
 8006fa8:	f7f9 f926 	bl	80001f8 <__aeabi_dsub>
 8006fac:	4632      	mov	r2, r6
 8006fae:	463b      	mov	r3, r7
 8006fb0:	f7f9 f922 	bl	80001f8 <__aeabi_dsub>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4640      	mov	r0, r8
 8006fba:	4649      	mov	r1, r9
 8006fbc:	e7da      	b.n	8006f74 <__kernel_cos+0xec>
 8006fbe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006ff8 <__kernel_cos+0x170>
 8006fc2:	e7db      	b.n	8006f7c <__kernel_cos+0xf4>
 8006fc4:	f3af 8000 	nop.w
 8006fc8:	be8838d4 	.word	0xbe8838d4
 8006fcc:	bda8fae9 	.word	0xbda8fae9
 8006fd0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006fd4:	3e21ee9e 	.word	0x3e21ee9e
 8006fd8:	809c52ad 	.word	0x809c52ad
 8006fdc:	3e927e4f 	.word	0x3e927e4f
 8006fe0:	19cb1590 	.word	0x19cb1590
 8006fe4:	3efa01a0 	.word	0x3efa01a0
 8006fe8:	16c15177 	.word	0x16c15177
 8006fec:	3f56c16c 	.word	0x3f56c16c
 8006ff0:	5555554c 	.word	0x5555554c
 8006ff4:	3fa55555 	.word	0x3fa55555
 8006ff8:	00000000 	.word	0x00000000
 8006ffc:	3ff00000 	.word	0x3ff00000
 8007000:	3fe00000 	.word	0x3fe00000
 8007004:	3fd33332 	.word	0x3fd33332
 8007008:	3ff00000 	.word	0x3ff00000
 800700c:	3fe90000 	.word	0x3fe90000
 8007010:	3fd20000 	.word	0x3fd20000
 8007014:	00000000 	.word	0x00000000

08007018 <__kernel_rem_pio2>:
 8007018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701c:	ed2d 8b02 	vpush	{d8}
 8007020:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007024:	f112 0f14 	cmn.w	r2, #20
 8007028:	9308      	str	r3, [sp, #32]
 800702a:	9101      	str	r1, [sp, #4]
 800702c:	4bc6      	ldr	r3, [pc, #792]	; (8007348 <__kernel_rem_pio2+0x330>)
 800702e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007030:	9009      	str	r0, [sp, #36]	; 0x24
 8007032:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007036:	9304      	str	r3, [sp, #16]
 8007038:	9b08      	ldr	r3, [sp, #32]
 800703a:	f103 33ff 	add.w	r3, r3, #4294967295
 800703e:	bfa8      	it	ge
 8007040:	1ed4      	subge	r4, r2, #3
 8007042:	9306      	str	r3, [sp, #24]
 8007044:	bfb2      	itee	lt
 8007046:	2400      	movlt	r4, #0
 8007048:	2318      	movge	r3, #24
 800704a:	fb94 f4f3 	sdivge	r4, r4, r3
 800704e:	f06f 0317 	mvn.w	r3, #23
 8007052:	fb04 3303 	mla	r3, r4, r3, r3
 8007056:	eb03 0a02 	add.w	sl, r3, r2
 800705a:	9b04      	ldr	r3, [sp, #16]
 800705c:	9a06      	ldr	r2, [sp, #24]
 800705e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007338 <__kernel_rem_pio2+0x320>
 8007062:	eb03 0802 	add.w	r8, r3, r2
 8007066:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007068:	1aa7      	subs	r7, r4, r2
 800706a:	ae20      	add	r6, sp, #128	; 0x80
 800706c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007070:	2500      	movs	r5, #0
 8007072:	4545      	cmp	r5, r8
 8007074:	dd18      	ble.n	80070a8 <__kernel_rem_pio2+0x90>
 8007076:	9b08      	ldr	r3, [sp, #32]
 8007078:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800707c:	aa20      	add	r2, sp, #128	; 0x80
 800707e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007338 <__kernel_rem_pio2+0x320>
 8007082:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007086:	f1c3 0301 	rsb	r3, r3, #1
 800708a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800708e:	9307      	str	r3, [sp, #28]
 8007090:	9b07      	ldr	r3, [sp, #28]
 8007092:	9a04      	ldr	r2, [sp, #16]
 8007094:	4443      	add	r3, r8
 8007096:	429a      	cmp	r2, r3
 8007098:	db2f      	blt.n	80070fa <__kernel_rem_pio2+0xe2>
 800709a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800709e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80070a2:	462f      	mov	r7, r5
 80070a4:	2600      	movs	r6, #0
 80070a6:	e01b      	b.n	80070e0 <__kernel_rem_pio2+0xc8>
 80070a8:	42ef      	cmn	r7, r5
 80070aa:	d407      	bmi.n	80070bc <__kernel_rem_pio2+0xa4>
 80070ac:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80070b0:	f7f9 f9f0 	bl	8000494 <__aeabi_i2d>
 80070b4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80070b8:	3501      	adds	r5, #1
 80070ba:	e7da      	b.n	8007072 <__kernel_rem_pio2+0x5a>
 80070bc:	ec51 0b18 	vmov	r0, r1, d8
 80070c0:	e7f8      	b.n	80070b4 <__kernel_rem_pio2+0x9c>
 80070c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070c6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80070ca:	f7f9 fa4d 	bl	8000568 <__aeabi_dmul>
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070d6:	f7f9 f891 	bl	80001fc <__adddf3>
 80070da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070de:	3601      	adds	r6, #1
 80070e0:	9b06      	ldr	r3, [sp, #24]
 80070e2:	429e      	cmp	r6, r3
 80070e4:	f1a7 0708 	sub.w	r7, r7, #8
 80070e8:	ddeb      	ble.n	80070c2 <__kernel_rem_pio2+0xaa>
 80070ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070ee:	3508      	adds	r5, #8
 80070f0:	ecab 7b02 	vstmia	fp!, {d7}
 80070f4:	f108 0801 	add.w	r8, r8, #1
 80070f8:	e7ca      	b.n	8007090 <__kernel_rem_pio2+0x78>
 80070fa:	9b04      	ldr	r3, [sp, #16]
 80070fc:	aa0c      	add	r2, sp, #48	; 0x30
 80070fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007102:	930b      	str	r3, [sp, #44]	; 0x2c
 8007104:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007106:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800710a:	9c04      	ldr	r4, [sp, #16]
 800710c:	930a      	str	r3, [sp, #40]	; 0x28
 800710e:	ab98      	add	r3, sp, #608	; 0x260
 8007110:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007114:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007118:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800711c:	f8cd b008 	str.w	fp, [sp, #8]
 8007120:	4625      	mov	r5, r4
 8007122:	2d00      	cmp	r5, #0
 8007124:	dc78      	bgt.n	8007218 <__kernel_rem_pio2+0x200>
 8007126:	ec47 6b10 	vmov	d0, r6, r7
 800712a:	4650      	mov	r0, sl
 800712c:	f000 fbfc 	bl	8007928 <scalbn>
 8007130:	ec57 6b10 	vmov	r6, r7, d0
 8007134:	2200      	movs	r2, #0
 8007136:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800713a:	ee10 0a10 	vmov	r0, s0
 800713e:	4639      	mov	r1, r7
 8007140:	f7f9 fa12 	bl	8000568 <__aeabi_dmul>
 8007144:	ec41 0b10 	vmov	d0, r0, r1
 8007148:	f000 fb6e 	bl	8007828 <floor>
 800714c:	4b7f      	ldr	r3, [pc, #508]	; (800734c <__kernel_rem_pio2+0x334>)
 800714e:	ec51 0b10 	vmov	r0, r1, d0
 8007152:	2200      	movs	r2, #0
 8007154:	f7f9 fa08 	bl	8000568 <__aeabi_dmul>
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	4630      	mov	r0, r6
 800715e:	4639      	mov	r1, r7
 8007160:	f7f9 f84a 	bl	80001f8 <__aeabi_dsub>
 8007164:	460f      	mov	r7, r1
 8007166:	4606      	mov	r6, r0
 8007168:	f7f9 fc98 	bl	8000a9c <__aeabi_d2iz>
 800716c:	9007      	str	r0, [sp, #28]
 800716e:	f7f9 f991 	bl	8000494 <__aeabi_i2d>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	4630      	mov	r0, r6
 8007178:	4639      	mov	r1, r7
 800717a:	f7f9 f83d 	bl	80001f8 <__aeabi_dsub>
 800717e:	f1ba 0f00 	cmp.w	sl, #0
 8007182:	4606      	mov	r6, r0
 8007184:	460f      	mov	r7, r1
 8007186:	dd70      	ble.n	800726a <__kernel_rem_pio2+0x252>
 8007188:	1e62      	subs	r2, r4, #1
 800718a:	ab0c      	add	r3, sp, #48	; 0x30
 800718c:	9d07      	ldr	r5, [sp, #28]
 800718e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007192:	f1ca 0118 	rsb	r1, sl, #24
 8007196:	fa40 f301 	asr.w	r3, r0, r1
 800719a:	441d      	add	r5, r3
 800719c:	408b      	lsls	r3, r1
 800719e:	1ac0      	subs	r0, r0, r3
 80071a0:	ab0c      	add	r3, sp, #48	; 0x30
 80071a2:	9507      	str	r5, [sp, #28]
 80071a4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80071a8:	f1ca 0317 	rsb	r3, sl, #23
 80071ac:	fa40 f303 	asr.w	r3, r0, r3
 80071b0:	9302      	str	r3, [sp, #8]
 80071b2:	9b02      	ldr	r3, [sp, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	dd66      	ble.n	8007286 <__kernel_rem_pio2+0x26e>
 80071b8:	9b07      	ldr	r3, [sp, #28]
 80071ba:	2200      	movs	r2, #0
 80071bc:	3301      	adds	r3, #1
 80071be:	9307      	str	r3, [sp, #28]
 80071c0:	4615      	mov	r5, r2
 80071c2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80071c6:	4294      	cmp	r4, r2
 80071c8:	f300 8099 	bgt.w	80072fe <__kernel_rem_pio2+0x2e6>
 80071cc:	f1ba 0f00 	cmp.w	sl, #0
 80071d0:	dd07      	ble.n	80071e2 <__kernel_rem_pio2+0x1ca>
 80071d2:	f1ba 0f01 	cmp.w	sl, #1
 80071d6:	f000 80a5 	beq.w	8007324 <__kernel_rem_pio2+0x30c>
 80071da:	f1ba 0f02 	cmp.w	sl, #2
 80071de:	f000 80c1 	beq.w	8007364 <__kernel_rem_pio2+0x34c>
 80071e2:	9b02      	ldr	r3, [sp, #8]
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d14e      	bne.n	8007286 <__kernel_rem_pio2+0x26e>
 80071e8:	4632      	mov	r2, r6
 80071ea:	463b      	mov	r3, r7
 80071ec:	4958      	ldr	r1, [pc, #352]	; (8007350 <__kernel_rem_pio2+0x338>)
 80071ee:	2000      	movs	r0, #0
 80071f0:	f7f9 f802 	bl	80001f8 <__aeabi_dsub>
 80071f4:	4606      	mov	r6, r0
 80071f6:	460f      	mov	r7, r1
 80071f8:	2d00      	cmp	r5, #0
 80071fa:	d044      	beq.n	8007286 <__kernel_rem_pio2+0x26e>
 80071fc:	4650      	mov	r0, sl
 80071fe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007340 <__kernel_rem_pio2+0x328>
 8007202:	f000 fb91 	bl	8007928 <scalbn>
 8007206:	4630      	mov	r0, r6
 8007208:	4639      	mov	r1, r7
 800720a:	ec53 2b10 	vmov	r2, r3, d0
 800720e:	f7f8 fff3 	bl	80001f8 <__aeabi_dsub>
 8007212:	4606      	mov	r6, r0
 8007214:	460f      	mov	r7, r1
 8007216:	e036      	b.n	8007286 <__kernel_rem_pio2+0x26e>
 8007218:	4b4e      	ldr	r3, [pc, #312]	; (8007354 <__kernel_rem_pio2+0x33c>)
 800721a:	2200      	movs	r2, #0
 800721c:	4630      	mov	r0, r6
 800721e:	4639      	mov	r1, r7
 8007220:	f7f9 f9a2 	bl	8000568 <__aeabi_dmul>
 8007224:	f7f9 fc3a 	bl	8000a9c <__aeabi_d2iz>
 8007228:	f7f9 f934 	bl	8000494 <__aeabi_i2d>
 800722c:	4b4a      	ldr	r3, [pc, #296]	; (8007358 <__kernel_rem_pio2+0x340>)
 800722e:	2200      	movs	r2, #0
 8007230:	4680      	mov	r8, r0
 8007232:	4689      	mov	r9, r1
 8007234:	f7f9 f998 	bl	8000568 <__aeabi_dmul>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4630      	mov	r0, r6
 800723e:	4639      	mov	r1, r7
 8007240:	f7f8 ffda 	bl	80001f8 <__aeabi_dsub>
 8007244:	f7f9 fc2a 	bl	8000a9c <__aeabi_d2iz>
 8007248:	9b02      	ldr	r3, [sp, #8]
 800724a:	f843 0b04 	str.w	r0, [r3], #4
 800724e:	3d01      	subs	r5, #1
 8007250:	9302      	str	r3, [sp, #8]
 8007252:	ab70      	add	r3, sp, #448	; 0x1c0
 8007254:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	4640      	mov	r0, r8
 800725e:	4649      	mov	r1, r9
 8007260:	f7f8 ffcc 	bl	80001fc <__adddf3>
 8007264:	4606      	mov	r6, r0
 8007266:	460f      	mov	r7, r1
 8007268:	e75b      	b.n	8007122 <__kernel_rem_pio2+0x10a>
 800726a:	d105      	bne.n	8007278 <__kernel_rem_pio2+0x260>
 800726c:	1e63      	subs	r3, r4, #1
 800726e:	aa0c      	add	r2, sp, #48	; 0x30
 8007270:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007274:	15c3      	asrs	r3, r0, #23
 8007276:	e79b      	b.n	80071b0 <__kernel_rem_pio2+0x198>
 8007278:	4b38      	ldr	r3, [pc, #224]	; (800735c <__kernel_rem_pio2+0x344>)
 800727a:	2200      	movs	r2, #0
 800727c:	f7f9 fbfa 	bl	8000a74 <__aeabi_dcmpge>
 8007280:	2800      	cmp	r0, #0
 8007282:	d139      	bne.n	80072f8 <__kernel_rem_pio2+0x2e0>
 8007284:	9002      	str	r0, [sp, #8]
 8007286:	2200      	movs	r2, #0
 8007288:	2300      	movs	r3, #0
 800728a:	4630      	mov	r0, r6
 800728c:	4639      	mov	r1, r7
 800728e:	f7f9 fbd3 	bl	8000a38 <__aeabi_dcmpeq>
 8007292:	2800      	cmp	r0, #0
 8007294:	f000 80b4 	beq.w	8007400 <__kernel_rem_pio2+0x3e8>
 8007298:	f104 3bff 	add.w	fp, r4, #4294967295
 800729c:	465b      	mov	r3, fp
 800729e:	2200      	movs	r2, #0
 80072a0:	9904      	ldr	r1, [sp, #16]
 80072a2:	428b      	cmp	r3, r1
 80072a4:	da65      	bge.n	8007372 <__kernel_rem_pio2+0x35a>
 80072a6:	2a00      	cmp	r2, #0
 80072a8:	d07b      	beq.n	80073a2 <__kernel_rem_pio2+0x38a>
 80072aa:	ab0c      	add	r3, sp, #48	; 0x30
 80072ac:	f1aa 0a18 	sub.w	sl, sl, #24
 80072b0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 80a0 	beq.w	80073fa <__kernel_rem_pio2+0x3e2>
 80072ba:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007340 <__kernel_rem_pio2+0x328>
 80072be:	4650      	mov	r0, sl
 80072c0:	f000 fb32 	bl	8007928 <scalbn>
 80072c4:	4f23      	ldr	r7, [pc, #140]	; (8007354 <__kernel_rem_pio2+0x33c>)
 80072c6:	ec55 4b10 	vmov	r4, r5, d0
 80072ca:	46d8      	mov	r8, fp
 80072cc:	2600      	movs	r6, #0
 80072ce:	f1b8 0f00 	cmp.w	r8, #0
 80072d2:	f280 80cf 	bge.w	8007474 <__kernel_rem_pio2+0x45c>
 80072d6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007338 <__kernel_rem_pio2+0x320>
 80072da:	465f      	mov	r7, fp
 80072dc:	f04f 0800 	mov.w	r8, #0
 80072e0:	2f00      	cmp	r7, #0
 80072e2:	f2c0 80fd 	blt.w	80074e0 <__kernel_rem_pio2+0x4c8>
 80072e6:	ab70      	add	r3, sp, #448	; 0x1c0
 80072e8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007360 <__kernel_rem_pio2+0x348>
 80072ec:	ec55 4b18 	vmov	r4, r5, d8
 80072f0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80072f4:	2600      	movs	r6, #0
 80072f6:	e0e5      	b.n	80074c4 <__kernel_rem_pio2+0x4ac>
 80072f8:	2302      	movs	r3, #2
 80072fa:	9302      	str	r3, [sp, #8]
 80072fc:	e75c      	b.n	80071b8 <__kernel_rem_pio2+0x1a0>
 80072fe:	f8db 3000 	ldr.w	r3, [fp]
 8007302:	b955      	cbnz	r5, 800731a <__kernel_rem_pio2+0x302>
 8007304:	b123      	cbz	r3, 8007310 <__kernel_rem_pio2+0x2f8>
 8007306:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800730a:	f8cb 3000 	str.w	r3, [fp]
 800730e:	2301      	movs	r3, #1
 8007310:	3201      	adds	r2, #1
 8007312:	f10b 0b04 	add.w	fp, fp, #4
 8007316:	461d      	mov	r5, r3
 8007318:	e755      	b.n	80071c6 <__kernel_rem_pio2+0x1ae>
 800731a:	1acb      	subs	r3, r1, r3
 800731c:	f8cb 3000 	str.w	r3, [fp]
 8007320:	462b      	mov	r3, r5
 8007322:	e7f5      	b.n	8007310 <__kernel_rem_pio2+0x2f8>
 8007324:	1e62      	subs	r2, r4, #1
 8007326:	ab0c      	add	r3, sp, #48	; 0x30
 8007328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007330:	a90c      	add	r1, sp, #48	; 0x30
 8007332:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007336:	e754      	b.n	80071e2 <__kernel_rem_pio2+0x1ca>
	...
 8007344:	3ff00000 	.word	0x3ff00000
 8007348:	08007c38 	.word	0x08007c38
 800734c:	40200000 	.word	0x40200000
 8007350:	3ff00000 	.word	0x3ff00000
 8007354:	3e700000 	.word	0x3e700000
 8007358:	41700000 	.word	0x41700000
 800735c:	3fe00000 	.word	0x3fe00000
 8007360:	08007bf8 	.word	0x08007bf8
 8007364:	1e62      	subs	r2, r4, #1
 8007366:	ab0c      	add	r3, sp, #48	; 0x30
 8007368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007370:	e7de      	b.n	8007330 <__kernel_rem_pio2+0x318>
 8007372:	a90c      	add	r1, sp, #48	; 0x30
 8007374:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007378:	3b01      	subs	r3, #1
 800737a:	430a      	orrs	r2, r1
 800737c:	e790      	b.n	80072a0 <__kernel_rem_pio2+0x288>
 800737e:	3301      	adds	r3, #1
 8007380:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007384:	2900      	cmp	r1, #0
 8007386:	d0fa      	beq.n	800737e <__kernel_rem_pio2+0x366>
 8007388:	9a08      	ldr	r2, [sp, #32]
 800738a:	18e3      	adds	r3, r4, r3
 800738c:	18a6      	adds	r6, r4, r2
 800738e:	aa20      	add	r2, sp, #128	; 0x80
 8007390:	1c65      	adds	r5, r4, #1
 8007392:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007396:	9302      	str	r3, [sp, #8]
 8007398:	9b02      	ldr	r3, [sp, #8]
 800739a:	42ab      	cmp	r3, r5
 800739c:	da04      	bge.n	80073a8 <__kernel_rem_pio2+0x390>
 800739e:	461c      	mov	r4, r3
 80073a0:	e6b5      	b.n	800710e <__kernel_rem_pio2+0xf6>
 80073a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073a4:	2301      	movs	r3, #1
 80073a6:	e7eb      	b.n	8007380 <__kernel_rem_pio2+0x368>
 80073a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073ae:	f7f9 f871 	bl	8000494 <__aeabi_i2d>
 80073b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80073b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b8:	46b3      	mov	fp, r6
 80073ba:	461c      	mov	r4, r3
 80073bc:	2700      	movs	r7, #0
 80073be:	f04f 0800 	mov.w	r8, #0
 80073c2:	f04f 0900 	mov.w	r9, #0
 80073c6:	9b06      	ldr	r3, [sp, #24]
 80073c8:	429f      	cmp	r7, r3
 80073ca:	dd06      	ble.n	80073da <__kernel_rem_pio2+0x3c2>
 80073cc:	ab70      	add	r3, sp, #448	; 0x1c0
 80073ce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80073d2:	e9c3 8900 	strd	r8, r9, [r3]
 80073d6:	3501      	adds	r5, #1
 80073d8:	e7de      	b.n	8007398 <__kernel_rem_pio2+0x380>
 80073da:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80073de:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80073e2:	f7f9 f8c1 	bl	8000568 <__aeabi_dmul>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4640      	mov	r0, r8
 80073ec:	4649      	mov	r1, r9
 80073ee:	f7f8 ff05 	bl	80001fc <__adddf3>
 80073f2:	3701      	adds	r7, #1
 80073f4:	4680      	mov	r8, r0
 80073f6:	4689      	mov	r9, r1
 80073f8:	e7e5      	b.n	80073c6 <__kernel_rem_pio2+0x3ae>
 80073fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073fe:	e754      	b.n	80072aa <__kernel_rem_pio2+0x292>
 8007400:	ec47 6b10 	vmov	d0, r6, r7
 8007404:	f1ca 0000 	rsb	r0, sl, #0
 8007408:	f000 fa8e 	bl	8007928 <scalbn>
 800740c:	ec57 6b10 	vmov	r6, r7, d0
 8007410:	4b9f      	ldr	r3, [pc, #636]	; (8007690 <__kernel_rem_pio2+0x678>)
 8007412:	ee10 0a10 	vmov	r0, s0
 8007416:	2200      	movs	r2, #0
 8007418:	4639      	mov	r1, r7
 800741a:	f7f9 fb2b 	bl	8000a74 <__aeabi_dcmpge>
 800741e:	b300      	cbz	r0, 8007462 <__kernel_rem_pio2+0x44a>
 8007420:	4b9c      	ldr	r3, [pc, #624]	; (8007694 <__kernel_rem_pio2+0x67c>)
 8007422:	2200      	movs	r2, #0
 8007424:	4630      	mov	r0, r6
 8007426:	4639      	mov	r1, r7
 8007428:	f7f9 f89e 	bl	8000568 <__aeabi_dmul>
 800742c:	f7f9 fb36 	bl	8000a9c <__aeabi_d2iz>
 8007430:	4605      	mov	r5, r0
 8007432:	f7f9 f82f 	bl	8000494 <__aeabi_i2d>
 8007436:	4b96      	ldr	r3, [pc, #600]	; (8007690 <__kernel_rem_pio2+0x678>)
 8007438:	2200      	movs	r2, #0
 800743a:	f7f9 f895 	bl	8000568 <__aeabi_dmul>
 800743e:	460b      	mov	r3, r1
 8007440:	4602      	mov	r2, r0
 8007442:	4639      	mov	r1, r7
 8007444:	4630      	mov	r0, r6
 8007446:	f7f8 fed7 	bl	80001f8 <__aeabi_dsub>
 800744a:	f7f9 fb27 	bl	8000a9c <__aeabi_d2iz>
 800744e:	f104 0b01 	add.w	fp, r4, #1
 8007452:	ab0c      	add	r3, sp, #48	; 0x30
 8007454:	f10a 0a18 	add.w	sl, sl, #24
 8007458:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800745c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007460:	e72b      	b.n	80072ba <__kernel_rem_pio2+0x2a2>
 8007462:	4630      	mov	r0, r6
 8007464:	4639      	mov	r1, r7
 8007466:	f7f9 fb19 	bl	8000a9c <__aeabi_d2iz>
 800746a:	ab0c      	add	r3, sp, #48	; 0x30
 800746c:	46a3      	mov	fp, r4
 800746e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007472:	e722      	b.n	80072ba <__kernel_rem_pio2+0x2a2>
 8007474:	ab70      	add	r3, sp, #448	; 0x1c0
 8007476:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800747a:	ab0c      	add	r3, sp, #48	; 0x30
 800747c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007480:	f7f9 f808 	bl	8000494 <__aeabi_i2d>
 8007484:	4622      	mov	r2, r4
 8007486:	462b      	mov	r3, r5
 8007488:	f7f9 f86e 	bl	8000568 <__aeabi_dmul>
 800748c:	4632      	mov	r2, r6
 800748e:	e9c9 0100 	strd	r0, r1, [r9]
 8007492:	463b      	mov	r3, r7
 8007494:	4620      	mov	r0, r4
 8007496:	4629      	mov	r1, r5
 8007498:	f7f9 f866 	bl	8000568 <__aeabi_dmul>
 800749c:	f108 38ff 	add.w	r8, r8, #4294967295
 80074a0:	4604      	mov	r4, r0
 80074a2:	460d      	mov	r5, r1
 80074a4:	e713      	b.n	80072ce <__kernel_rem_pio2+0x2b6>
 80074a6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80074aa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80074ae:	f7f9 f85b 	bl	8000568 <__aeabi_dmul>
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	4620      	mov	r0, r4
 80074b8:	4629      	mov	r1, r5
 80074ba:	f7f8 fe9f 	bl	80001fc <__adddf3>
 80074be:	3601      	adds	r6, #1
 80074c0:	4604      	mov	r4, r0
 80074c2:	460d      	mov	r5, r1
 80074c4:	9b04      	ldr	r3, [sp, #16]
 80074c6:	429e      	cmp	r6, r3
 80074c8:	dc01      	bgt.n	80074ce <__kernel_rem_pio2+0x4b6>
 80074ca:	45b0      	cmp	r8, r6
 80074cc:	daeb      	bge.n	80074a6 <__kernel_rem_pio2+0x48e>
 80074ce:	ab48      	add	r3, sp, #288	; 0x120
 80074d0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80074d4:	e9c3 4500 	strd	r4, r5, [r3]
 80074d8:	3f01      	subs	r7, #1
 80074da:	f108 0801 	add.w	r8, r8, #1
 80074de:	e6ff      	b.n	80072e0 <__kernel_rem_pio2+0x2c8>
 80074e0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	dc0b      	bgt.n	80074fe <__kernel_rem_pio2+0x4e6>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	dc6e      	bgt.n	80075c8 <__kernel_rem_pio2+0x5b0>
 80074ea:	d045      	beq.n	8007578 <__kernel_rem_pio2+0x560>
 80074ec:	9b07      	ldr	r3, [sp, #28]
 80074ee:	f003 0007 	and.w	r0, r3, #7
 80074f2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80074f6:	ecbd 8b02 	vpop	{d8}
 80074fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007500:	2b03      	cmp	r3, #3
 8007502:	d1f3      	bne.n	80074ec <__kernel_rem_pio2+0x4d4>
 8007504:	ab48      	add	r3, sp, #288	; 0x120
 8007506:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800750a:	46d0      	mov	r8, sl
 800750c:	46d9      	mov	r9, fp
 800750e:	f1b9 0f00 	cmp.w	r9, #0
 8007512:	f1a8 0808 	sub.w	r8, r8, #8
 8007516:	dc64      	bgt.n	80075e2 <__kernel_rem_pio2+0x5ca>
 8007518:	465c      	mov	r4, fp
 800751a:	2c01      	cmp	r4, #1
 800751c:	f1aa 0a08 	sub.w	sl, sl, #8
 8007520:	dc7e      	bgt.n	8007620 <__kernel_rem_pio2+0x608>
 8007522:	2000      	movs	r0, #0
 8007524:	2100      	movs	r1, #0
 8007526:	f1bb 0f01 	cmp.w	fp, #1
 800752a:	f300 8097 	bgt.w	800765c <__kernel_rem_pio2+0x644>
 800752e:	9b02      	ldr	r3, [sp, #8]
 8007530:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8007534:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007538:	2b00      	cmp	r3, #0
 800753a:	f040 8099 	bne.w	8007670 <__kernel_rem_pio2+0x658>
 800753e:	9b01      	ldr	r3, [sp, #4]
 8007540:	e9c3 5600 	strd	r5, r6, [r3]
 8007544:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007548:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800754c:	e7ce      	b.n	80074ec <__kernel_rem_pio2+0x4d4>
 800754e:	ab48      	add	r3, sp, #288	; 0x120
 8007550:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f7f8 fe50 	bl	80001fc <__adddf3>
 800755c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007560:	f1bb 0f00 	cmp.w	fp, #0
 8007564:	daf3      	bge.n	800754e <__kernel_rem_pio2+0x536>
 8007566:	9b02      	ldr	r3, [sp, #8]
 8007568:	b113      	cbz	r3, 8007570 <__kernel_rem_pio2+0x558>
 800756a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800756e:	4619      	mov	r1, r3
 8007570:	9b01      	ldr	r3, [sp, #4]
 8007572:	e9c3 0100 	strd	r0, r1, [r3]
 8007576:	e7b9      	b.n	80074ec <__kernel_rem_pio2+0x4d4>
 8007578:	2000      	movs	r0, #0
 800757a:	2100      	movs	r1, #0
 800757c:	e7f0      	b.n	8007560 <__kernel_rem_pio2+0x548>
 800757e:	ab48      	add	r3, sp, #288	; 0x120
 8007580:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007588:	f7f8 fe38 	bl	80001fc <__adddf3>
 800758c:	3c01      	subs	r4, #1
 800758e:	2c00      	cmp	r4, #0
 8007590:	daf5      	bge.n	800757e <__kernel_rem_pio2+0x566>
 8007592:	9b02      	ldr	r3, [sp, #8]
 8007594:	b1e3      	cbz	r3, 80075d0 <__kernel_rem_pio2+0x5b8>
 8007596:	4602      	mov	r2, r0
 8007598:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800759c:	9c01      	ldr	r4, [sp, #4]
 800759e:	e9c4 2300 	strd	r2, r3, [r4]
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80075aa:	f7f8 fe25 	bl	80001f8 <__aeabi_dsub>
 80075ae:	ad4a      	add	r5, sp, #296	; 0x128
 80075b0:	2401      	movs	r4, #1
 80075b2:	45a3      	cmp	fp, r4
 80075b4:	da0f      	bge.n	80075d6 <__kernel_rem_pio2+0x5be>
 80075b6:	9b02      	ldr	r3, [sp, #8]
 80075b8:	b113      	cbz	r3, 80075c0 <__kernel_rem_pio2+0x5a8>
 80075ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075be:	4619      	mov	r1, r3
 80075c0:	9b01      	ldr	r3, [sp, #4]
 80075c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80075c6:	e791      	b.n	80074ec <__kernel_rem_pio2+0x4d4>
 80075c8:	465c      	mov	r4, fp
 80075ca:	2000      	movs	r0, #0
 80075cc:	2100      	movs	r1, #0
 80075ce:	e7de      	b.n	800758e <__kernel_rem_pio2+0x576>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	e7e2      	b.n	800759c <__kernel_rem_pio2+0x584>
 80075d6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80075da:	f7f8 fe0f 	bl	80001fc <__adddf3>
 80075de:	3401      	adds	r4, #1
 80075e0:	e7e7      	b.n	80075b2 <__kernel_rem_pio2+0x59a>
 80075e2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80075e6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80075ea:	4620      	mov	r0, r4
 80075ec:	4632      	mov	r2, r6
 80075ee:	463b      	mov	r3, r7
 80075f0:	4629      	mov	r1, r5
 80075f2:	f7f8 fe03 	bl	80001fc <__adddf3>
 80075f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4620      	mov	r0, r4
 8007600:	4629      	mov	r1, r5
 8007602:	f7f8 fdf9 	bl	80001f8 <__aeabi_dsub>
 8007606:	4632      	mov	r2, r6
 8007608:	463b      	mov	r3, r7
 800760a:	f7f8 fdf7 	bl	80001fc <__adddf3>
 800760e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007612:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8007616:	ed88 7b00 	vstr	d7, [r8]
 800761a:	f109 39ff 	add.w	r9, r9, #4294967295
 800761e:	e776      	b.n	800750e <__kernel_rem_pio2+0x4f6>
 8007620:	e9da 8900 	ldrd	r8, r9, [sl]
 8007624:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007628:	4640      	mov	r0, r8
 800762a:	4632      	mov	r2, r6
 800762c:	463b      	mov	r3, r7
 800762e:	4649      	mov	r1, r9
 8007630:	f7f8 fde4 	bl	80001fc <__adddf3>
 8007634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4640      	mov	r0, r8
 800763e:	4649      	mov	r1, r9
 8007640:	f7f8 fdda 	bl	80001f8 <__aeabi_dsub>
 8007644:	4632      	mov	r2, r6
 8007646:	463b      	mov	r3, r7
 8007648:	f7f8 fdd8 	bl	80001fc <__adddf3>
 800764c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007650:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007654:	ed8a 7b00 	vstr	d7, [sl]
 8007658:	3c01      	subs	r4, #1
 800765a:	e75e      	b.n	800751a <__kernel_rem_pio2+0x502>
 800765c:	ab48      	add	r3, sp, #288	; 0x120
 800765e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007666:	f7f8 fdc9 	bl	80001fc <__adddf3>
 800766a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800766e:	e75a      	b.n	8007526 <__kernel_rem_pio2+0x50e>
 8007670:	9b01      	ldr	r3, [sp, #4]
 8007672:	9a01      	ldr	r2, [sp, #4]
 8007674:	601d      	str	r5, [r3, #0]
 8007676:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800767a:	605c      	str	r4, [r3, #4]
 800767c:	609f      	str	r7, [r3, #8]
 800767e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007682:	60d3      	str	r3, [r2, #12]
 8007684:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007688:	6110      	str	r0, [r2, #16]
 800768a:	6153      	str	r3, [r2, #20]
 800768c:	e72e      	b.n	80074ec <__kernel_rem_pio2+0x4d4>
 800768e:	bf00      	nop
 8007690:	41700000 	.word	0x41700000
 8007694:	3e700000 	.word	0x3e700000

08007698 <__kernel_sin>:
 8007698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	ed2d 8b04 	vpush	{d8-d9}
 80076a0:	eeb0 8a41 	vmov.f32	s16, s2
 80076a4:	eef0 8a61 	vmov.f32	s17, s3
 80076a8:	ec55 4b10 	vmov	r4, r5, d0
 80076ac:	b083      	sub	sp, #12
 80076ae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80076b2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80076b6:	9001      	str	r0, [sp, #4]
 80076b8:	da06      	bge.n	80076c8 <__kernel_sin+0x30>
 80076ba:	ee10 0a10 	vmov	r0, s0
 80076be:	4629      	mov	r1, r5
 80076c0:	f7f9 f9ec 	bl	8000a9c <__aeabi_d2iz>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d051      	beq.n	800776c <__kernel_sin+0xd4>
 80076c8:	4622      	mov	r2, r4
 80076ca:	462b      	mov	r3, r5
 80076cc:	4620      	mov	r0, r4
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7f8 ff4a 	bl	8000568 <__aeabi_dmul>
 80076d4:	4682      	mov	sl, r0
 80076d6:	468b      	mov	fp, r1
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4620      	mov	r0, r4
 80076de:	4629      	mov	r1, r5
 80076e0:	f7f8 ff42 	bl	8000568 <__aeabi_dmul>
 80076e4:	a341      	add	r3, pc, #260	; (adr r3, 80077ec <__kernel_sin+0x154>)
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	4680      	mov	r8, r0
 80076ec:	4689      	mov	r9, r1
 80076ee:	4650      	mov	r0, sl
 80076f0:	4659      	mov	r1, fp
 80076f2:	f7f8 ff39 	bl	8000568 <__aeabi_dmul>
 80076f6:	a33f      	add	r3, pc, #252	; (adr r3, 80077f4 <__kernel_sin+0x15c>)
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f7f8 fd7c 	bl	80001f8 <__aeabi_dsub>
 8007700:	4652      	mov	r2, sl
 8007702:	465b      	mov	r3, fp
 8007704:	f7f8 ff30 	bl	8000568 <__aeabi_dmul>
 8007708:	a33c      	add	r3, pc, #240	; (adr r3, 80077fc <__kernel_sin+0x164>)
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f7f8 fd75 	bl	80001fc <__adddf3>
 8007712:	4652      	mov	r2, sl
 8007714:	465b      	mov	r3, fp
 8007716:	f7f8 ff27 	bl	8000568 <__aeabi_dmul>
 800771a:	a33a      	add	r3, pc, #232	; (adr r3, 8007804 <__kernel_sin+0x16c>)
 800771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007720:	f7f8 fd6a 	bl	80001f8 <__aeabi_dsub>
 8007724:	4652      	mov	r2, sl
 8007726:	465b      	mov	r3, fp
 8007728:	f7f8 ff1e 	bl	8000568 <__aeabi_dmul>
 800772c:	a337      	add	r3, pc, #220	; (adr r3, 800780c <__kernel_sin+0x174>)
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f7f8 fd63 	bl	80001fc <__adddf3>
 8007736:	9b01      	ldr	r3, [sp, #4]
 8007738:	4606      	mov	r6, r0
 800773a:	460f      	mov	r7, r1
 800773c:	b9eb      	cbnz	r3, 800777a <__kernel_sin+0xe2>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	4650      	mov	r0, sl
 8007744:	4659      	mov	r1, fp
 8007746:	f7f8 ff0f 	bl	8000568 <__aeabi_dmul>
 800774a:	a325      	add	r3, pc, #148	; (adr r3, 80077e0 <__kernel_sin+0x148>)
 800774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007750:	f7f8 fd52 	bl	80001f8 <__aeabi_dsub>
 8007754:	4642      	mov	r2, r8
 8007756:	464b      	mov	r3, r9
 8007758:	f7f8 ff06 	bl	8000568 <__aeabi_dmul>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4620      	mov	r0, r4
 8007762:	4629      	mov	r1, r5
 8007764:	f7f8 fd4a 	bl	80001fc <__adddf3>
 8007768:	4604      	mov	r4, r0
 800776a:	460d      	mov	r5, r1
 800776c:	ec45 4b10 	vmov	d0, r4, r5
 8007770:	b003      	add	sp, #12
 8007772:	ecbd 8b04 	vpop	{d8-d9}
 8007776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777a:	4b1b      	ldr	r3, [pc, #108]	; (80077e8 <__kernel_sin+0x150>)
 800777c:	ec51 0b18 	vmov	r0, r1, d8
 8007780:	2200      	movs	r2, #0
 8007782:	f7f8 fef1 	bl	8000568 <__aeabi_dmul>
 8007786:	4632      	mov	r2, r6
 8007788:	ec41 0b19 	vmov	d9, r0, r1
 800778c:	463b      	mov	r3, r7
 800778e:	4640      	mov	r0, r8
 8007790:	4649      	mov	r1, r9
 8007792:	f7f8 fee9 	bl	8000568 <__aeabi_dmul>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	ec51 0b19 	vmov	r0, r1, d9
 800779e:	f7f8 fd2b 	bl	80001f8 <__aeabi_dsub>
 80077a2:	4652      	mov	r2, sl
 80077a4:	465b      	mov	r3, fp
 80077a6:	f7f8 fedf 	bl	8000568 <__aeabi_dmul>
 80077aa:	ec53 2b18 	vmov	r2, r3, d8
 80077ae:	f7f8 fd23 	bl	80001f8 <__aeabi_dsub>
 80077b2:	a30b      	add	r3, pc, #44	; (adr r3, 80077e0 <__kernel_sin+0x148>)
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	4606      	mov	r6, r0
 80077ba:	460f      	mov	r7, r1
 80077bc:	4640      	mov	r0, r8
 80077be:	4649      	mov	r1, r9
 80077c0:	f7f8 fed2 	bl	8000568 <__aeabi_dmul>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4630      	mov	r0, r6
 80077ca:	4639      	mov	r1, r7
 80077cc:	f7f8 fd16 	bl	80001fc <__adddf3>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4620      	mov	r0, r4
 80077d6:	4629      	mov	r1, r5
 80077d8:	f7f8 fd0e 	bl	80001f8 <__aeabi_dsub>
 80077dc:	e7c4      	b.n	8007768 <__kernel_sin+0xd0>
 80077de:	bf00      	nop
 80077e0:	55555549 	.word	0x55555549
 80077e4:	3fc55555 	.word	0x3fc55555
 80077e8:	3fe00000 	.word	0x3fe00000
 80077ec:	5acfd57c 	.word	0x5acfd57c
 80077f0:	3de5d93a 	.word	0x3de5d93a
 80077f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80077f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80077fc:	57b1fe7d 	.word	0x57b1fe7d
 8007800:	3ec71de3 	.word	0x3ec71de3
 8007804:	19c161d5 	.word	0x19c161d5
 8007808:	3f2a01a0 	.word	0x3f2a01a0
 800780c:	1110f8a6 	.word	0x1110f8a6
 8007810:	3f811111 	.word	0x3f811111

08007814 <fabs>:
 8007814:	ec51 0b10 	vmov	r0, r1, d0
 8007818:	ee10 2a10 	vmov	r2, s0
 800781c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007820:	ec43 2b10 	vmov	d0, r2, r3
 8007824:	4770      	bx	lr
	...

08007828 <floor>:
 8007828:	ec51 0b10 	vmov	r0, r1, d0
 800782c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007830:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007834:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007838:	2e13      	cmp	r6, #19
 800783a:	ee10 5a10 	vmov	r5, s0
 800783e:	ee10 8a10 	vmov	r8, s0
 8007842:	460c      	mov	r4, r1
 8007844:	dc32      	bgt.n	80078ac <floor+0x84>
 8007846:	2e00      	cmp	r6, #0
 8007848:	da14      	bge.n	8007874 <floor+0x4c>
 800784a:	a333      	add	r3, pc, #204	; (adr r3, 8007918 <floor+0xf0>)
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f7f8 fcd4 	bl	80001fc <__adddf3>
 8007854:	2200      	movs	r2, #0
 8007856:	2300      	movs	r3, #0
 8007858:	f7f9 f916 	bl	8000a88 <__aeabi_dcmpgt>
 800785c:	b138      	cbz	r0, 800786e <floor+0x46>
 800785e:	2c00      	cmp	r4, #0
 8007860:	da57      	bge.n	8007912 <floor+0xea>
 8007862:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007866:	431d      	orrs	r5, r3
 8007868:	d001      	beq.n	800786e <floor+0x46>
 800786a:	4c2d      	ldr	r4, [pc, #180]	; (8007920 <floor+0xf8>)
 800786c:	2500      	movs	r5, #0
 800786e:	4621      	mov	r1, r4
 8007870:	4628      	mov	r0, r5
 8007872:	e025      	b.n	80078c0 <floor+0x98>
 8007874:	4f2b      	ldr	r7, [pc, #172]	; (8007924 <floor+0xfc>)
 8007876:	4137      	asrs	r7, r6
 8007878:	ea01 0307 	and.w	r3, r1, r7
 800787c:	4303      	orrs	r3, r0
 800787e:	d01f      	beq.n	80078c0 <floor+0x98>
 8007880:	a325      	add	r3, pc, #148	; (adr r3, 8007918 <floor+0xf0>)
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	f7f8 fcb9 	bl	80001fc <__adddf3>
 800788a:	2200      	movs	r2, #0
 800788c:	2300      	movs	r3, #0
 800788e:	f7f9 f8fb 	bl	8000a88 <__aeabi_dcmpgt>
 8007892:	2800      	cmp	r0, #0
 8007894:	d0eb      	beq.n	800786e <floor+0x46>
 8007896:	2c00      	cmp	r4, #0
 8007898:	bfbe      	ittt	lt
 800789a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800789e:	fa43 f606 	asrlt.w	r6, r3, r6
 80078a2:	19a4      	addlt	r4, r4, r6
 80078a4:	ea24 0407 	bic.w	r4, r4, r7
 80078a8:	2500      	movs	r5, #0
 80078aa:	e7e0      	b.n	800786e <floor+0x46>
 80078ac:	2e33      	cmp	r6, #51	; 0x33
 80078ae:	dd0b      	ble.n	80078c8 <floor+0xa0>
 80078b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80078b4:	d104      	bne.n	80078c0 <floor+0x98>
 80078b6:	ee10 2a10 	vmov	r2, s0
 80078ba:	460b      	mov	r3, r1
 80078bc:	f7f8 fc9e 	bl	80001fc <__adddf3>
 80078c0:	ec41 0b10 	vmov	d0, r0, r1
 80078c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80078cc:	f04f 33ff 	mov.w	r3, #4294967295
 80078d0:	fa23 f707 	lsr.w	r7, r3, r7
 80078d4:	4207      	tst	r7, r0
 80078d6:	d0f3      	beq.n	80078c0 <floor+0x98>
 80078d8:	a30f      	add	r3, pc, #60	; (adr r3, 8007918 <floor+0xf0>)
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	f7f8 fc8d 	bl	80001fc <__adddf3>
 80078e2:	2200      	movs	r2, #0
 80078e4:	2300      	movs	r3, #0
 80078e6:	f7f9 f8cf 	bl	8000a88 <__aeabi_dcmpgt>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d0bf      	beq.n	800786e <floor+0x46>
 80078ee:	2c00      	cmp	r4, #0
 80078f0:	da02      	bge.n	80078f8 <floor+0xd0>
 80078f2:	2e14      	cmp	r6, #20
 80078f4:	d103      	bne.n	80078fe <floor+0xd6>
 80078f6:	3401      	adds	r4, #1
 80078f8:	ea25 0507 	bic.w	r5, r5, r7
 80078fc:	e7b7      	b.n	800786e <floor+0x46>
 80078fe:	2301      	movs	r3, #1
 8007900:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007904:	fa03 f606 	lsl.w	r6, r3, r6
 8007908:	4435      	add	r5, r6
 800790a:	4545      	cmp	r5, r8
 800790c:	bf38      	it	cc
 800790e:	18e4      	addcc	r4, r4, r3
 8007910:	e7f2      	b.n	80078f8 <floor+0xd0>
 8007912:	2500      	movs	r5, #0
 8007914:	462c      	mov	r4, r5
 8007916:	e7aa      	b.n	800786e <floor+0x46>
 8007918:	8800759c 	.word	0x8800759c
 800791c:	7e37e43c 	.word	0x7e37e43c
 8007920:	bff00000 	.word	0xbff00000
 8007924:	000fffff 	.word	0x000fffff

08007928 <scalbn>:
 8007928:	b570      	push	{r4, r5, r6, lr}
 800792a:	ec55 4b10 	vmov	r4, r5, d0
 800792e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007932:	4606      	mov	r6, r0
 8007934:	462b      	mov	r3, r5
 8007936:	b99a      	cbnz	r2, 8007960 <scalbn+0x38>
 8007938:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800793c:	4323      	orrs	r3, r4
 800793e:	d036      	beq.n	80079ae <scalbn+0x86>
 8007940:	4b39      	ldr	r3, [pc, #228]	; (8007a28 <scalbn+0x100>)
 8007942:	4629      	mov	r1, r5
 8007944:	ee10 0a10 	vmov	r0, s0
 8007948:	2200      	movs	r2, #0
 800794a:	f7f8 fe0d 	bl	8000568 <__aeabi_dmul>
 800794e:	4b37      	ldr	r3, [pc, #220]	; (8007a2c <scalbn+0x104>)
 8007950:	429e      	cmp	r6, r3
 8007952:	4604      	mov	r4, r0
 8007954:	460d      	mov	r5, r1
 8007956:	da10      	bge.n	800797a <scalbn+0x52>
 8007958:	a32b      	add	r3, pc, #172	; (adr r3, 8007a08 <scalbn+0xe0>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	e03a      	b.n	80079d6 <scalbn+0xae>
 8007960:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007964:	428a      	cmp	r2, r1
 8007966:	d10c      	bne.n	8007982 <scalbn+0x5a>
 8007968:	ee10 2a10 	vmov	r2, s0
 800796c:	4620      	mov	r0, r4
 800796e:	4629      	mov	r1, r5
 8007970:	f7f8 fc44 	bl	80001fc <__adddf3>
 8007974:	4604      	mov	r4, r0
 8007976:	460d      	mov	r5, r1
 8007978:	e019      	b.n	80079ae <scalbn+0x86>
 800797a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800797e:	460b      	mov	r3, r1
 8007980:	3a36      	subs	r2, #54	; 0x36
 8007982:	4432      	add	r2, r6
 8007984:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007988:	428a      	cmp	r2, r1
 800798a:	dd08      	ble.n	800799e <scalbn+0x76>
 800798c:	2d00      	cmp	r5, #0
 800798e:	a120      	add	r1, pc, #128	; (adr r1, 8007a10 <scalbn+0xe8>)
 8007990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007994:	da1c      	bge.n	80079d0 <scalbn+0xa8>
 8007996:	a120      	add	r1, pc, #128	; (adr r1, 8007a18 <scalbn+0xf0>)
 8007998:	e9d1 0100 	ldrd	r0, r1, [r1]
 800799c:	e018      	b.n	80079d0 <scalbn+0xa8>
 800799e:	2a00      	cmp	r2, #0
 80079a0:	dd08      	ble.n	80079b4 <scalbn+0x8c>
 80079a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80079a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80079aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80079ae:	ec45 4b10 	vmov	d0, r4, r5
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80079b8:	da19      	bge.n	80079ee <scalbn+0xc6>
 80079ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80079be:	429e      	cmp	r6, r3
 80079c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80079c4:	dd0a      	ble.n	80079dc <scalbn+0xb4>
 80079c6:	a112      	add	r1, pc, #72	; (adr r1, 8007a10 <scalbn+0xe8>)
 80079c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e2      	bne.n	8007996 <scalbn+0x6e>
 80079d0:	a30f      	add	r3, pc, #60	; (adr r3, 8007a10 <scalbn+0xe8>)
 80079d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d6:	f7f8 fdc7 	bl	8000568 <__aeabi_dmul>
 80079da:	e7cb      	b.n	8007974 <scalbn+0x4c>
 80079dc:	a10a      	add	r1, pc, #40	; (adr r1, 8007a08 <scalbn+0xe0>)
 80079de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d0b8      	beq.n	8007958 <scalbn+0x30>
 80079e6:	a10e      	add	r1, pc, #56	; (adr r1, 8007a20 <scalbn+0xf8>)
 80079e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079ec:	e7b4      	b.n	8007958 <scalbn+0x30>
 80079ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80079f2:	3236      	adds	r2, #54	; 0x36
 80079f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80079f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80079fc:	4620      	mov	r0, r4
 80079fe:	4b0c      	ldr	r3, [pc, #48]	; (8007a30 <scalbn+0x108>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	e7e8      	b.n	80079d6 <scalbn+0xae>
 8007a04:	f3af 8000 	nop.w
 8007a08:	c2f8f359 	.word	0xc2f8f359
 8007a0c:	01a56e1f 	.word	0x01a56e1f
 8007a10:	8800759c 	.word	0x8800759c
 8007a14:	7e37e43c 	.word	0x7e37e43c
 8007a18:	8800759c 	.word	0x8800759c
 8007a1c:	fe37e43c 	.word	0xfe37e43c
 8007a20:	c2f8f359 	.word	0xc2f8f359
 8007a24:	81a56e1f 	.word	0x81a56e1f
 8007a28:	43500000 	.word	0x43500000
 8007a2c:	ffff3cb0 	.word	0xffff3cb0
 8007a30:	3c900000 	.word	0x3c900000

08007a34 <_init>:
 8007a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a36:	bf00      	nop
 8007a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3a:	bc08      	pop	{r3}
 8007a3c:	469e      	mov	lr, r3
 8007a3e:	4770      	bx	lr

08007a40 <_fini>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	bf00      	nop
 8007a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a46:	bc08      	pop	{r3}
 8007a48:	469e      	mov	lr, r3
 8007a4a:	4770      	bx	lr
